!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	//
$(NAME)	minilibx_linux/Makefile	/^$(NAME)	: $(OBJ)$/;"	t
$(NOM)	minilibx_mac/Makefile	/^$(NOM):	$(OBJ)$/;"	t
$(OBJ_DIR)/%.o	minilibx_linux/Makefile	/^$(OBJ_DIR)\/%.o: %.c$/;"	t
${NAME}	libft/Makefile	/^${NAME}: ${OBJS}$/;"	t
%.o	libft/Makefile	/^%.o: %.c$/;"	t
BACKWARD	include/cub3d.h	/^enum e_player_direction{ FORWARD, BACKWARD, RIGHT, LEFT, NB_DIRECTION };$/;"	e	enum:e_player_direction
C	include/cub3d.h	/^enum e_identifiers { NO, SO, WE, EA, F, C };$/;"	e	enum:e_identifiers
CC	libft/Makefile	/^CC = gcc$/;"	m
CC	minilibx_linux/Makefile	/^	CC = clang$/;"	m
CC	minilibx_linux/Makefile	/^CC	= gcc$/;"	m
CFLAGS	libft/Makefile	/^CFLAGS = -Wall -Wextra -Werror$/;"	m
CFLAGS	minilibx_linux/Makefile	/^CFLAGS	= -O3 -I$(INC)$/;"	m
CLIC	include/cub3d.h	/^# define CLIC /;"	d
CUB3D_H	include/cub3d.h	/^# define CUB3D_H$/;"	d
DATA	include/cub3d.h	/^enum log_type { DATA, PARAM, PLAYER, MAP };$/;"	e	enum:log_type
DEBUG_LOG_FILENAME	include/cub3d.h	/^# define DEBUG_LOG_FILENAME /;"	d
DEFAULT_ROTATION_ANGLE	include/cub3d.h	/^# define DEFAULT_ROTATION_ANGLE /;"	d
DOWN_ARROW	include/cub3d.h	/^# define DOWN_ARROW /;"	d
E	include/cub3d.h	/^enum e_direction { N=1, S=2, W=10, E=20, NW=11, SW=12, SE=22, NE=21 };$/;"	e	enum:e_direction
EA	include/cub3d.h	/^enum e_identifiers { NO, SO, WE, EA, F, C };$/;"	e	enum:e_identifiers
EAST	include/cub3d.h	/^enum e_cardinal { NORTH, SOUTH, EAST, WEST };$/;"	e	enum:e_cardinal
EAST_CHAR	include/cub3d.h	/^# define EAST_CHAR /;"	d
EMPTY	include/cub3d.h	/^# define EMPTY /;"	d
ENV_DISPLAY	minilibx_linux/mlx_int.h	/^# define ENV_DISPLAY /;"	d
ERR_DATA_FILTER	minilibx_mac/mlx_png.c	/^#define	ERR_DATA_FILTER	/;"	d	file:
ERR_DATA_MISMATCH	minilibx_mac/mlx_png.c	/^#define	ERR_DATA_MISMATCH	/;"	d	file:
ERR_MAGIC_SIZE	minilibx_mac/mlx_png.c	/^#define	ERR_MAGIC_SIZE	/;"	d	file:
ERR_MAGIC_WRONG	minilibx_mac/mlx_png.c	/^#define	ERR_MAGIC_WRONG	/;"	d	file:
ERR_NO_TRUECOLOR	minilibx_linux/mlx_int.h	/^# define ERR_NO_TRUECOLOR /;"	d
ERR_STRUCT_CRC	minilibx_mac/mlx_png.c	/^#define	ERR_STRUCT_CRC	/;"	d	file:
ERR_STRUCT_DAT	minilibx_mac/mlx_png.c	/^#define	ERR_STRUCT_DAT	/;"	d	file:
ERR_STRUCT_END	minilibx_mac/mlx_png.c	/^#define	ERR_STRUCT_END	/;"	d	file:
ERR_STRUCT_HDR	minilibx_mac/mlx_png.c	/^#define	ERR_STRUCT_HDR	/;"	d	file:
ERR_STRUCT_INCIMPL	minilibx_mac/mlx_png.c	/^#define	ERR_STRUCT_INCIMPL /;"	d	file:
ERR_STRUCT_INCOMPLETE	minilibx_mac/mlx_png.c	/^#define	ERR_STRUCT_INCOMPLETE	/;"	d	file:
ERR_STRUCT_MISSCHK	minilibx_mac/mlx_png.c	/^#define	ERR_STRUCT_MISSCHK	/;"	d	file:
ERR_ZLIB	minilibx_mac/mlx_png.c	/^#define	ERR_ZLIB	/;"	d	file:
EXPOSE_X	include/cub3d.h	/^#  define EXPOSE_X /;"	d
F	include/cub3d.h	/^enum e_identifiers { NO, SO, WE, EA, F, C };$/;"	e	enum:e_identifiers
FLOOR	include/cub3d.h	/^# define FLOOR /;"	d
FONT_HEIGHT	minilibx_mac/mlx_int.h	/^#define	FONT_HEIGHT	/;"	d
FONT_WIDTH	minilibx_mac/mlx_int.h	/^#define FONT_WIDTH	/;"	d
FORWARD	include/cub3d.h	/^enum e_player_direction{ FORWARD, BACKWARD, RIGHT, LEFT, NB_DIRECTION };$/;"	e	enum:e_player_direction
GREEN	include/cub3d.h	/^# define GREEN /;"	d
INC	minilibx_linux/Makefile	/^INC	=%%%%$/;"	m
KEY_A	include/cub3d.h	/^#  define KEY_A /;"	d
KEY_C	include/cub3d.h	/^#  define KEY_C /;"	d
KEY_D	include/cub3d.h	/^#  define KEY_D /;"	d
KEY_DOWN	include/cub3d.h	/^#  define KEY_DOWN /;"	d
KEY_E	include/cub3d.h	/^#  define KEY_E /;"	d
KEY_ESC	include/cub3d.h	/^#  define KEY_ESC /;"	d
KEY_F	include/cub3d.h	/^#  define KEY_F /;"	d
KEY_IN	include/cub3d.h	/^#  define KEY_IN /;"	d
KEY_LEFT	include/cub3d.h	/^#  define KEY_LEFT /;"	d
KEY_OUT	include/cub3d.h	/^#  define KEY_OUT /;"	d
KEY_Q	include/cub3d.h	/^#  define KEY_Q /;"	d
KEY_R	include/cub3d.h	/^#  define KEY_R /;"	d
KEY_RIGHT	include/cub3d.h	/^#  define KEY_RIGHT /;"	d
KEY_S	include/cub3d.h	/^#  define KEY_S /;"	d
KEY_UP	include/cub3d.h	/^#  define KEY_UP /;"	d
KEY_W	include/cub3d.h	/^#  define KEY_W /;"	d
KEY_X	include/cub3d.h	/^#  define KEY_X /;"	d
KEY_Z	include/cub3d.h	/^#  define KEY_Z /;"	d
LEFT	include/cub3d.h	/^enum e_player_direction{ FORWARD, BACKWARD, RIGHT, LEFT, NB_DIRECTION };$/;"	e	enum:e_player_direction
LEFT_ARROW	include/cub3d.h	/^# define LEFT_ARROW /;"	d
LIBFT_H	libft/libft.h	/^# define LIBFT_H$/;"	d
LOCALHOST	minilibx_linux/mlx_int.h	/^# define LOCALHOST /;"	d
MAP	include/cub3d.h	/^enum log_type { DATA, PARAM, PLAYER, MAP };$/;"	e	enum:log_type
MAPCASES	include/cub3d.h	/^# define MAPCASES /;"	d
MAX_EVENT	minilibx_mac/mlx_int.h	/^#define	MAX_EVENT	/;"	d
MAX_PIXEL_NB	minilibx_mac/mlx_int.h	/^#define MAX_PIXEL_NB	/;"	d
MLX_H	minilibx_linux/mlx.h	/^#define	MLX_H$/;"	d
MLX_H	minilibx_mac/mlx.h	/^#define	MLX_H$/;"	d
MLX_INT_H	minilibx_linux/mlx_int.h	/^# define MLX_INT_H$/;"	d
MLX_MAX_EVENT	minilibx_linux/mlx_int.h	/^# define MLX_MAX_EVENT /;"	d
MLX_TYPE_SHM	minilibx_linux/mlx_int.h	/^# define MLX_TYPE_SHM /;"	d
MLX_TYPE_SHM_PIXMAP	minilibx_linux/mlx_int.h	/^# define MLX_TYPE_SHM_PIXMAP /;"	d
MLX_TYPE_XIMAGE	minilibx_linux/mlx_int.h	/^# define MLX_TYPE_XIMAGE /;"	d
MlxWin	minilibx_mac/mlx_new_window.h	/^@interface MlxWin : NSOpenGLView$/;"	i
MlxWin	minilibx_mac/mlx_new_window.m	/^@implementation MlxWin$/;"	I
N	include/cub3d.h	/^enum e_direction { N=1, S=2, W=10, E=20, NW=11, SW=12, SE=22, NE=21 };$/;"	e	enum:e_direction
NAME	libft/Makefile	/^NAME = libft.a$/;"	m
NAME	minilibx_linux/Makefile	/^NAME		= libmlx.a$/;"	m
NAME_UNAME	minilibx_linux/Makefile	/^NAME_UNAME	= libmlx_$(UNAME).a$/;"	m
NB_DIRECTION	include/cub3d.h	/^enum e_player_direction{ FORWARD, BACKWARD, RIGHT, LEFT, NB_DIRECTION };$/;"	e	enum:e_player_direction
NB_TEXTURES	include/cub3d.h	/^# define NB_TEXTURES /;"	d
NE	include/cub3d.h	/^enum e_direction { N=1, S=2, W=10, E=20, NW=11, SW=12, SE=22, NE=21 };$/;"	e	enum:e_direction
NO	include/cub3d.h	/^enum e_identifiers { NO, SO, WE, EA, F, C };$/;"	e	enum:e_identifiers
NOM	minilibx_mac/Makefile	/^NOM=libmlx.a$/;"	m
NORTH	include/cub3d.h	/^enum e_cardinal { NORTH, SOUTH, EAST, WEST };$/;"	e	enum:e_cardinal
NORTH_CHAR	include/cub3d.h	/^# define NORTH_CHAR /;"	d
NSWindowEvent	minilibx_mac/mlx_new_window.h	/^@interface NSWindowEvent : NSWindow$/;"	i
NSWindowEvent	minilibx_mac/mlx_new_window.m	/^@implementation NSWindowEvent$/;"	I
NW	include/cub3d.h	/^enum e_direction { N=1, S=2, W=10, E=20, NW=11, SW=12, SE=22, NE=21 };$/;"	e	enum:e_direction
OBJ	minilibx_linux/Makefile	/^OBJ	= $(addprefix $(OBJ_DIR)\/,$(SRC:%.c=%.o))$/;"	m
OBJ	minilibx_mac/Makefile	/^OBJ=$(OBJ1:.m=.o)$/;"	m
OBJ1	minilibx_mac/Makefile	/^OBJ1=$(SRC:.c=.o)$/;"	m
OBJS	libft/Makefile	/^OBJS := ${SRCS:c=o}$/;"	m
OBJ_DIR	minilibx_linux/Makefile	/^OBJ_DIR = obj$/;"	m
ON_DESTROY	include/cub3d.h	/^#  define ON_DESTROY /;"	d
ON_MOUSEDOWN	include/cub3d.h	/^# define ON_MOUSEDOWN /;"	d
ON_MOUSEUP	include/cub3d.h	/^# define ON_MOUSEUP /;"	d
PARAM	include/cub3d.h	/^enum log_type { DATA, PARAM, PLAYER, MAP };$/;"	e	enum:log_type
PI	include/cub3d.h	/^# define PI /;"	d
PLAYER	include/cub3d.h	/^enum log_type { DATA, PARAM, PLAYER, MAP };$/;"	e	enum:log_type
PNG_HDR_SIZE	minilibx_mac/mlx_png.c	/^#define PNG_HDR_SIZE	/;"	d	file:
PNG_MAGIC_SIZE	minilibx_mac/mlx_png.c	/^#define	PNG_MAGIC_SIZE	/;"	d	file:
RAYCAST_QUALITY	include/cub3d.h	/^# define RAYCAST_QUALITY /;"	d
RED	include/cub3d.h	/^# define RED /;"	d
RETURN	minilibx_linux/mlx_xpm.c	/^#define	RETURN	/;"	d	file:
RETURN	minilibx_mac/mlx_xpm.c	/^#define	RETURN	/;"	d	file:
RIGHT	include/cub3d.h	/^enum e_player_direction{ FORWARD, BACKWARD, RIGHT, LEFT, NB_DIRECTION };$/;"	e	enum:e_player_direction
RIGH_ARROW	include/cub3d.h	/^# define RIGH_ARROW /;"	d
S	include/cub3d.h	/^enum e_direction { N=1, S=2, W=10, E=20, NW=11, SW=12, SE=22, NE=21 };$/;"	e	enum:e_direction
SCREEN_HEIGHT	include/cub3d.h	/^# define SCREEN_HEIGHT /;"	d
SCREEN_WIDTH	include/cub3d.h	/^# define SCREEN_WIDTH /;"	d
SE	include/cub3d.h	/^enum e_direction { N=1, S=2, W=10, E=20, NW=11, SW=12, SE=22, NE=21 };$/;"	e	enum:e_direction
SO	include/cub3d.h	/^enum e_identifiers { NO, SO, WE, EA, F, C };$/;"	e	enum:e_identifiers
SOUTH	include/cub3d.h	/^enum e_cardinal { NORTH, SOUTH, EAST, WEST };$/;"	e	enum:e_cardinal
SOUTH_CHAR	include/cub3d.h	/^# define SOUTH_CHAR /;"	d
SRC	minilibx_linux/Makefile	/^SRC	= mlx_init.c mlx_new_window.c mlx_pixel_put.c mlx_loop.c \\$/;"	m
SRC	minilibx_mac/Makefile	/^SRC= mlx_shaders.c mlx_new_window.m mlx_init_loop.m mlx_new_image.m mlx_xpm.c mlx_int_str_to_wor/;"	m
SRCS	libft/Makefile	/^SRCS = error_msg.c ft_atoi.c ft_atoi_err.c ft_bzero.c ft_calloc.c \\$/;"	m
STEPS_PER_BOX	include/cub3d.h	/^# define STEPS_PER_BOX /;"	d
SW	include/cub3d.h	/^enum e_direction { N=1, S=2, W=10, E=20, NW=11, SW=12, SE=22, NE=21 };$/;"	e	enum:e_direction
TOUCH_A	include/cub3d.h	/^#  define TOUCH_A /;"	d
TOUCH_D	include/cub3d.h	/^#  define TOUCH_D /;"	d
TOUCH_DOWN	include/cub3d.h	/^#  define TOUCH_DOWN /;"	d
TOUCH_ESC	include/cub3d.h	/^#  define TOUCH_ESC /;"	d
TOUCH_LEFT	include/cub3d.h	/^#  define TOUCH_LEFT /;"	d
TOUCH_RIGHT	include/cub3d.h	/^#  define TOUCH_RIGHT /;"	d
TOUCH_S	include/cub3d.h	/^#  define TOUCH_S /;"	d
TOUCH_UP	include/cub3d.h	/^#  define TOUCH_UP /;"	d
TOUCH_W	include/cub3d.h	/^#  define TOUCH_W /;"	d
UNAME	minilibx_linux/Makefile	/^UNAME = $(shell uname)$/;"	m
UNIQ_BPP	minilibx_mac/mlx_int.h	/^#define UNIQ_BPP	/;"	d
UNITS_PER_BOX	include/cub3d.h	/^# define UNITS_PER_BOX /;"	d
UP_ARROW	include/cub3d.h	/^# define UP_ARROW /;"	d
W	include/cub3d.h	/^enum e_direction { N=1, S=2, W=10, E=20, NW=11, SW=12, SE=22, NE=21 };$/;"	e	enum:e_direction
WALL	include/cub3d.h	/^# define WALL /;"	d
WARN_SHM_ATTACH	minilibx_linux/mlx_int.h	/^# define WARN_SHM_ATTACH /;"	d
WE	include/cub3d.h	/^enum e_identifiers { NO, SO, WE, EA, F, C };$/;"	e	enum:e_identifiers
WEST	include/cub3d.h	/^enum e_cardinal { NORTH, SOUTH, EAST, WEST };$/;"	e	enum:e_cardinal
WEST_CHAR	include/cub3d.h	/^# define WEST_CHAR /;"	d
X_ShmAttach	minilibx_linux/mlx_new_image.c	/^#define	X_ShmAttach	/;"	d	file:
Z_CHUNK	minilibx_mac/mlx_png.c	/^#define	Z_CHUNK	/;"	d	file:
__anon9577d4a80108	minilibx_mac/font.c	/^static const struct {$/;"	s	file:
acceptsFirstResponder	minilibx_mac/mlx_new_window.m	/^{$/;"	m	implementation:NSWindowEvent
add_img_to_ctx	minilibx_mac/mlx_new_image.m	/^mlx_img_ctx_t	*add_img_to_ctx(mlx_img_list_t *img, mlx_win_list_t *win)$/;"	f
add_vec	src/vector_ft.c	/^void	add_vec(t_point	*pt, t_point vector)$/;"	f	typeref:typename:void
addr	include/cub3d.h	/^	char			*addr;$/;"	m	struct:s_image	typeref:typename:char *
all	libft/Makefile	/^all: ${NAME}$/;"	t
all	minilibx_linux/Makefile	/^all	: $(NAME)$/;"	t
all	minilibx_mac/Makefile	/^all: $(NOM)$/;"	t
appid	minilibx_mac/mlx_int.h	/^  void			*appid;$/;"	m	struct:mlx_ptr_s	typeref:typename:void *
bpp	include/cub3d.h	/^	int				bpp;$/;"	m	struct:s_image	typeref:typename:int
bpp	minilibx_linux/mlx_int.h	/^	int				bpp;$/;"	m	struct:s_img	typeref:typename:int
bpp	minilibx_mac/mlx_png.c	/^  int		bpp;$/;"	m	struct:png_info_s	typeref:typename:int	file:
buffer	minilibx_mac/mlx_int.h	/^  char			*buffer;$/;"	m	struct:mlx_img_list_s	typeref:typename:char *
bytes_per_pixel	minilibx_mac/font.c	/^  unsigned int 	 bytes_per_pixel; \/* 2:RGB16, 3:RGB, 4:RGBA *\/ $/;"	m	struct:__anon9577d4a80108	typeref:typename:unsigned int	file:
c_to_i	libft/ft_atoi.c	/^static long int	c_to_i(char c)$/;"	f	typeref:typename:long int	file:
c_to_i	libft/ft_atoi_err.c	/^static long int	c_to_i(char c)$/;"	f	typeref:typename:long int	file:
carry_negative	libft/ft_itoa.c	/^static char	*carry_negative(int *n, char *n_strn, int *len)$/;"	f	typeref:typename:char *	file:
ceiling_color	include/cub3d.h	/^	unsigned int	ceiling_color;$/;"	m	struct:s_image	typeref:typename:unsigned int
check	minilibx_linux/Makefile	/^check: all$/;"	t
check_closest_box	src/move_to_corner.c	/^int	check_closest_box(t_player *player)$/;"	f	typeref:typename:int
check_map	src/parse_check_map.c	/^int	check_map(t_data *data)$/;"	f	typeref:typename:int
check_map_line	src/parse_check_map.c	/^void	check_map_line(t_data *data, int y, int *nb_player)$/;"	f	typeref:typename:void
check_update_box_pos	src/move_player.c	/^int	check_update_box_pos(t_data *data)$/;"	f	typeref:typename:int
check_wall	src/move_player.c	/^int	check_wall(t_data *data, int crossover_direction)$/;"	f	typeref:typename:int
clean	libft/Makefile	/^clean:$/;"	t
clean	minilibx_linux/Makefile	/^clean	:$/;"	t
clean	minilibx_mac/Makefile	/^clean:$/;"	t
clean_exit	src/exit_ft.c	/^void	clean_exit(t_data *data, int exit_code)$/;"	f	typeref:typename:void
clearWin	minilibx_mac/mlx_new_window.m	/^{$/;"	m	implementation:MlxWin
closeNotification:	minilibx_mac/mlx_new_window.h	/^- (void) closeNotification:(NSNotification *)note;$/;"	m	interface:NSWindowEvent
closeNotification:	minilibx_mac/mlx_new_window.m	/^{$/;"	m	implementation:NSWindowEvent
cmap	minilibx_linux/mlx_int.h	/^	Colormap	cmap;$/;"	m	struct:s_xvar	typeref:typename:Colormap
col	minilibx_linux/mlx_int.h	/^	int		col;$/;"	m	struct:s_xpm_col	typeref:typename:int
col	minilibx_mac/mlx_xpm.c	/^  int           col;$/;"	m	struct:s_xpm_col	typeref:typename:int	file:
color	minilibx_linux/mlx_int.h	/^	int		color;$/;"	m	struct:s_col_name	typeref:typename:int
color	minilibx_mac/mlx_png.c	/^  int		color;$/;"	m	struct:png_info_s	typeref:typename:int	file:
color	minilibx_mac/mlx_xpm.c	/^  int   color;$/;"	m	struct:s_col_name	typeref:typename:int	file:
conv_id_param	src/parse_params.c	/^int	conv_id_param(t_data *data, int identifier_len, char *str)$/;"	f	typeref:typename:int
corner_crossing	src/move_to_corner.c	/^int	corner_crossing(t_data *data)$/;"	f	typeref:typename:int
crc_table	minilibx_mac/mlx_png.c	/^unsigned long crc_table[256] = { 0, 0x77073096, 0xee0e612c, 0x990951ba, 0x76dc419, 0x706af48f, 0/;"	v	typeref:typename:unsigned long[256]
ctags	libft/Makefile	/^ctags:$/;"	t
ctx	minilibx_mac/mlx_new_window.h	/^  NSOpenGLContext	*ctx;$/;"	E	interface:MlxWin
ctx	minilibx_mac/mlx_new_window.h	/^- (NSOpenGLContext *) ctx;$/;"	m	interface:MlxWin
ctx	minilibx_mac/mlx_new_window.m	/^{$/;"	m	implementation:MlxWin
ctxNeedsUpdate	minilibx_mac/mlx_new_window.h	/^- (void) ctxNeedsUpdate;$/;"	m	interface:MlxWin
ctxNeedsUpdate	minilibx_mac/mlx_new_window.m	/^{$/;"	m	implementation:MlxWin
data	minilibx_linux/mlx_int.h	/^	char			*data;$/;"	m	struct:s_img	typeref:typename:char *
debug	libft/Makefile	/^debug: ctags$/;"	t
decrgb	minilibx_linux/mlx_int.h	/^	int			decrgb[6];$/;"	m	struct:s_xvar	typeref:typename:int[6]
default_map	src/matrix.c	/^char	**default_map(char	*argv[])$/;"	f	typeref:typename:char **
degree_to_radian	src/vector_ft.c	/^double	degree_to_radian(double degree_angle)$/;"	f	typeref:typename:double
deminiaturizeNotification:	minilibx_mac/mlx_new_window.m	/^{$/;"	m	implementation:NSWindowEvent
depth	minilibx_linux/mlx_int.h	/^	int			depth;$/;"	m	struct:s_xvar	typeref:typename:int
depth	minilibx_mac/mlx_png.c	/^  int		depth;$/;"	m	struct:png_info_s	typeref:typename:int	file:
destroyMe	minilibx_mac/mlx_new_window.m	/^{$/;"	m	implementation:MlxWin
destroyPixelManagement	minilibx_mac/mlx_new_window.m	/^{$/;"	m	implementation:MlxWin
direction	include/cub3d.h	/^	t_vector	direction;$/;"	m	struct:s_player	typeref:typename:t_vector
display	minilibx_linux/mlx_int.h	/^	Display		*display;$/;"	m	struct:s_xvar	typeref:typename:Display *
display_log	minilibx_mac/mlx_shaders.c	/^void display_log(GLuint object, void (*param_func)(), void (*getlog_func)())$/;"	f	typeref:typename:void
distance_point_to_vector	src/vector_ft.c	/^double	distance_point_to_vector(t_point point, t_point v_p1, t_point v_p2)$/;"	f	typeref:typename:double
do_flush	minilibx_linux/mlx_int.h	/^	int			do_flush;$/;"	m	struct:s_xvar	typeref:typename:int
do_loop_flush	minilibx_mac/mlx_init_loop.m	/^void do_loop_flush(CFRunLoopObserverRef observer, CFRunLoopActivity activity, void * info)$/;"	f
do_loop_hook2	minilibx_mac/mlx_init_loop.m	/^void	do_loop_hook2(CFRunLoopTimerRef observer, void * info)$/;"	f
e_cardinal	include/cub3d.h	/^enum e_cardinal { NORTH, SOUTH, EAST, WEST };$/;"	g
e_direction	include/cub3d.h	/^enum e_direction { N=1, S=2, W=10, E=20, NW=11, SW=12, SE=22, NE=21 };$/;"	g
e_identifiers	include/cub3d.h	/^enum e_identifiers { NO, SO, WE, EA, F, C };$/;"	g
e_player_direction	include/cub3d.h	/^enum e_player_direction{ FORWARD, BACKWARD, RIGHT, LEFT, NB_DIRECTION };$/;"	g
east_crossing	src/move_crossing_box.c	/^int	east_crossing(t_data *data)$/;"	f	typeref:typename:int
end_loop	minilibx_linux/mlx_int.h	/^	int 		end_loop;$/;"	m	struct:s_xvar	typeref:typename:int
endian	include/cub3d.h	/^	int				endian;$/;"	m	struct:s_image	typeref:typename:int
error_msg	libft/error_msg.c	/^void	error_msg(char *msg)$/;"	f	typeref:typename:void
event_funct	minilibx_mac/mlx_new_window.h	/^  func_t	event_funct[MAX_EVENT];$/;"	E	interface:NSWindowEvent
exit_msg	src/exit_ft.c	/^void	exit_msg(t_data *data, char *msg, int ret_exit)$/;"	f	typeref:typename:void
exposeNotification:	minilibx_mac/mlx_new_window.h	/^- (void) exposeNotification:(NSNotification *)note;$/;"	m	interface:NSWindowEvent
exposeNotification:	minilibx_mac/mlx_new_window.m	/^{$/;"	m	implementation:NSWindowEvent
expose_hook	minilibx_linux/mlx_int.h	/^	int					(*expose_hook)();$/;"	m	struct:s_win_list	typeref:typename:int (*)()
expose_param	minilibx_linux/mlx_int.h	/^	void				*expose_param;$/;"	m	struct:s_win_list	typeref:typename:void *
f	include/cub3d.h	/^	void			(*f)();$/;"	m	struct:s_image	typeref:typename:void (*)()
f_is_box_crossed	src/move_player.c	/^static int	f_is_box_crossed(t_player *player)$/;"	f	typeref:typename:int	file:
fclean	libft/Makefile	/^fclean: clean$/;"	t
fclean	minilibx_mac/Makefile	/^fclean:$/;"	t
file_extention_available	src/parse_init.c	/^void	file_extention_available(t_data *data, char *fname)$/;"	f	typeref:typename:void
flagsChanged:	minilibx_mac/mlx_new_window.m	/^{$/;"	m	implementation:NSWindowEvent
floor_color	include/cub3d.h	/^	unsigned int	floor_color;$/;"	m	struct:s_image	typeref:typename:unsigned int
flushGLContext	minilibx_mac/mlx_new_window.h	/^- (void) flushGLContext;$/;"	m	interface:MlxWin
flushGLContext	minilibx_mac/mlx_new_window.m	/^{$/;"	m	implementation:MlxWin
font	minilibx_mac/mlx_int.h	/^  mlx_img_list_t	*font;$/;"	m	struct:mlx_ptr_s	typeref:typename:mlx_img_list_t *
font_atlas	minilibx_mac/font.c	/^} font_atlas = {$/;"	v	typeref:typename:const struct __anon9577d4a80108
font_fshader	minilibx_mac/mlx_int.h	/^  GLuint	font_fshader;$/;"	m	struct:glsl_info_s	typeref:typename:GLuint
font_program	minilibx_mac/mlx_int.h	/^  GLuint	font_program;$/;"	m	struct:glsl_info_s	typeref:typename:GLuint
font_vshader	minilibx_mac/mlx_int.h	/^  GLuint	font_vshader;$/;"	m	struct:glsl_info_s	typeref:typename:GLuint
format	minilibx_linux/mlx_int.h	/^	int				format;$/;"	m	struct:s_img	typeref:typename:int
ft_append_tab	src/matrix.c	/^char	**ft_append_tab(char **matrix, char *str)$/;"	f	typeref:typename:char **
ft_atoi	libft/ft_atoi.c	/^int	ft_atoi(const char *str0)$/;"	f	typeref:typename:int
ft_atoi_err	libft/ft_atoi_err.c	/^int	ft_atoi_err(char *str)$/;"	f	typeref:typename:int
ft_bzero	libft/ft_bzero.c	/^void	*ft_bzero(void *s, size_t n)$/;"	f	typeref:typename:void *
ft_calloc	libft/ft_calloc.c	/^void	*ft_calloc(size_t count, size_t size)$/;"	f	typeref:typename:void *
ft_free_split	libft/ft_free_split.c	/^void	ft_free_split(char ***tab)$/;"	f	typeref:typename:void
ft_get_next_wd	libft/ft_get_next_wd.c	/^char	*ft_get_next_wd(char *sentence, char sep)$/;"	f	typeref:typename:char *
ft_intlen	libft/ft_itoa.c	/^static int	ft_intlen(int n)$/;"	f	typeref:typename:int	file:
ft_isalnum	libft/ft_isalnum.c	/^int	ft_isalnum(int c)$/;"	f	typeref:typename:int
ft_isalpha	libft/ft_isalpha.c	/^int	ft_isalpha(int c)$/;"	f	typeref:typename:int
ft_isascii	libft/ft_isascii.c	/^int	ft_isascii(int c)$/;"	f	typeref:typename:int
ft_isdigit	libft/ft_isdigit.c	/^int	ft_isdigit(int c)$/;"	f	typeref:typename:int
ft_isprint	libft/ft_isprint.c	/^int	ft_isprint(int c)$/;"	f	typeref:typename:int
ft_isspace	libft/ft_atoi.c	/^static int	ft_isspace(const char c)$/;"	f	typeref:typename:int	file:
ft_isspace	libft/ft_atoi_err.c	/^static int	ft_isspace(const char c)$/;"	f	typeref:typename:int	file:
ft_itoa	libft/ft_itoa.c	/^char	*ft_itoa(int n)$/;"	f	typeref:typename:char *
ft_matrixlen	src/matrix.c	/^int	ft_matrixlen(char **matrix)$/;"	f	typeref:typename:int
ft_memchr	libft/ft_memchr.c	/^void	*ft_memchr(const void *str0, int c, size_t n)$/;"	f	typeref:typename:void *
ft_memcmp	libft/ft_memcmp.c	/^int	ft_memcmp(const void *s1, const void *s2, size_t n)$/;"	f	typeref:typename:int
ft_memcpy	libft/ft_memcpy.c	/^void	*ft_memcpy(void *dst, const void *src, unsigned int len)$/;"	f	typeref:typename:void *
ft_memmove	libft/ft_memmove.c	/^void	*ft_memmove(void *dst, const void *src, size_t len)$/;"	f	typeref:typename:void *
ft_memset	libft/ft_memset.c	/^void	*ft_memset(void *b, int c, size_t len)$/;"	f	typeref:typename:void *
ft_putchar_fd	libft/ft_putchar_fd.c	/^void	ft_putchar_fd(char c, int fd)$/;"	f	typeref:typename:void
ft_putendl_fd	libft/ft_putendl_fd.c	/^void	ft_putendl_fd(char *s, int fd)$/;"	f	typeref:typename:void
ft_putnbr_fd	libft/ft_putnbr_fd.c	/^void	ft_putnbr_fd(int n, int fd)$/;"	f	typeref:typename:void
ft_putstr_fd	libft/ft_putstr_fd.c	/^void	ft_putstr_fd(char *s, int fd)$/;"	f	typeref:typename:void
ft_realloc_cat	src/get_next_line.c	/^static char	*ft_realloc_cat(char *line, char c, int *len)$/;"	f	typeref:typename:char *	file:
ft_split	libft/ft_split.c	/^char	**ft_split(char const *s, char c)$/;"	f	typeref:typename:char **
ft_strchr	libft/ft_strchr.c	/^char	*ft_strchr(const char *str, int c)$/;"	f	typeref:typename:char *
ft_strdup	libft/ft_strdup.c	/^char	*ft_strdup(const char *s1)$/;"	f	typeref:typename:char *
ft_striteri	libft/ft_striteri.c	/^void	ft_striteri(char *s, void (*f)(unsigned int, char *))$/;"	f	typeref:typename:void
ft_strjoin	libft/ft_strjoin.c	/^char	*ft_strjoin(char const *s1, char const *s2)$/;"	f	typeref:typename:char *
ft_strlcat	libft/ft_strlcat.c	/^size_t	ft_strlcat(char *dst, const char *src, size_t dstsize)$/;"	f	typeref:typename:size_t
ft_strlcpy	libft/ft_strlcpy.c	/^size_t	ft_strlcpy(char *dst, const char *src, size_t dstsize)$/;"	f	typeref:typename:size_t
ft_strlen	libft/ft_strlen.c	/^size_t	ft_strlen(const char *str)$/;"	f	typeref:typename:size_t
ft_strlen_char	libft/ft_strlen_char.c	/^size_t	ft_strlen_char(char *str, char sep)$/;"	f	typeref:typename:size_t
ft_strmapi	libft/ft_strmapi.c	/^char	*ft_strmapi(char const *s, char (*f)(unsigned int, char))$/;"	f	typeref:typename:char *
ft_strncmp	libft/ft_strncmp.c	/^int	ft_strncmp(const char *s1, const char *s2, size_t n)$/;"	f	typeref:typename:int
ft_strnlen	libft/ft_strlcat.c	/^static unsigned int	ft_strnlen(char *s, size_t max)$/;"	f	typeref:typename:unsigned int	file:
ft_strnstr	libft/ft_strnstr.c	/^char	*ft_strnstr(const char *str, const char *ndl, size_t len)$/;"	f	typeref:typename:char *
ft_strrchr	libft/ft_strrchr.c	/^char	*ft_strrchr(char *s, int c)$/;"	f	typeref:typename:char *
ft_strtrim	libft/ft_strtrim.c	/^char	*ft_strtrim(char const *s1, char const *set)$/;"	f	typeref:typename:char *
ft_substr	libft/ft_substr.c	/^char	*ft_substr(char const *s, unsigned int start, size_t len)$/;"	f	typeref:typename:char *
ft_tolower	libft/ft_tolower.c	/^int	ft_tolower(int c)$/;"	f	typeref:typename:int
ft_toupper	libft/ft_toupper.c	/^int	ft_toupper(int c)$/;"	f	typeref:typename:int
ft_wd_count	libft/ft_wd_count.c	/^int	ft_wd_count(char *str, char sep)$/;"	f	typeref:typename:int
func_t	minilibx_mac/mlx_int.h	/^typedef int (*func_t)();$/;"	t	typeref:typename:int (*)()
gc	minilibx_linux/mlx_int.h	/^	GC					gc;$/;"	m	struct:s_win_list	typeref:typename:GC
gc	minilibx_linux/mlx_int.h	/^	GC				gc;$/;"	m	struct:s_img	typeref:typename:GC
get_identifier	src/parse_params.c	/^int	get_identifier(t_data *data, char *str)$/;"	f	typeref:typename:int
get_identifiers_ls	src/parse_params.c	/^char	**get_identifiers_ls(int identifier_len)$/;"	f	typeref:typename:char **
get_mouse_button	minilibx_mac/mlx_new_window.m	/^int get_mouse_button(NSEventType eventtype)$/;"	f
get_next_line	src/get_next_line.c	/^char	*get_next_line(int fd)$/;"	f	typeref:typename:char *
get_smallest_index	src/move_to_corner.c	/^int	get_smallest_index(double wall_distance[4])$/;"	f	typeref:typename:int
get_vector	src/vector_ft.c	/^t_point	get_vector(t_point *from, t_point *to)$/;"	f	typeref:typename:t_point
glsl	minilibx_mac/mlx_new_window.h	/^  glsl_info_t		glsl;$/;"	E	interface:MlxWin
glsl_info_s	minilibx_mac/mlx_int.h	/^typedef struct	glsl_info_s$/;"	s
glsl_info_t	minilibx_mac/mlx_int.h	/^} glsl_info_t;$/;"	t	typeref:struct:glsl_info_s
height	minilibx_linux/mlx_int.h	/^	int				height;$/;"	m	struct:s_img	typeref:typename:int
height	minilibx_mac/font.c	/^  unsigned int 	 height;$/;"	m	struct:__anon9577d4a80108	typeref:typename:unsigned int	file:
height	minilibx_mac/mlx_int.h	/^  int			height;$/;"	m	struct:mlx_img_list_s	typeref:typename:int
height	minilibx_mac/mlx_png.c	/^  unsigned int	height;$/;"	m	struct:png_info_s	typeref:typename:unsigned int	file:
hook	minilibx_linux/mlx_int.h	/^	int		(*hook)();$/;"	m	struct:s_event_list	typeref:typename:int (*)()
hooks	minilibx_linux/mlx_int.h	/^	t_event_list		hooks[MLX_MAX_EVENT];$/;"	m	struct:s_win_list	typeref:typename:t_event_list[]
image	include/cub3d.h	/^	t_image		*image;$/;"	m	struct:s_data	typeref:typename:t_image *
image	minilibx_linux/mlx_int.h	/^	XImage			*image;$/;"	m	struct:s_img	typeref:typename:XImage *
image_fshader	minilibx_mac/mlx_int.h	/^  GLuint	image_fshader;$/;"	m	struct:glsl_info_s	typeref:typename:GLuint
image_program	minilibx_mac/mlx_int.h	/^  GLuint	image_program;$/;"	m	struct:glsl_info_s	typeref:typename:GLuint
image_vshader	minilibx_mac/mlx_int.h	/^  GLuint	image_vshader;$/;"	m	struct:glsl_info_s	typeref:typename:GLuint
img	minilibx_mac/mlx_int.h	/^  mlx_img_list_t	*img;$/;"	m	struct:mlx_img_ctx_s	typeref:typename:mlx_img_list_t *
img_list	minilibx_mac/mlx_int.h	/^  mlx_img_ctx_t		*img_list;$/;"	m	struct:mlx_win_list_s	typeref:typename:mlx_img_ctx_t *
img_list	minilibx_mac/mlx_int.h	/^  mlx_img_list_t	*img_list;$/;"	m	struct:mlx_ptr_s	typeref:typename:mlx_img_list_t *
img_ptr	include/cub3d.h	/^	void			*img_ptr;$/;"	m	struct:s_image	typeref:typename:void *
import_param	src/parse_import.c	/^void	import_param(t_data *data, int identifier, char *line)$/;"	f	typeref:typename:void
import_params	src/parse_import.c	/^int	import_params(t_data *data)$/;"	f	typeref:typename:int
import_texture_path	src/parse_import.c	/^void	import_texture_path(t_data *data, int identifier, char *line)$/;"	f	typeref:typename:void
initWithContentRect:styleMask:backing:defer:	minilibx_mac/mlx_new_window.h	/^- (NSWindowEvent *) initWithContentRect:(NSRect)rect styleMask:(NSUInteger)winstyle backing:(NSB/;"	m	interface:NSWindowEvent
initWithContentRect:styleMask:backing:defer:	minilibx_mac/mlx_new_window.m	/^{$/;"	m	implementation:NSWindowEvent
initWithRect:andTitle:pfaAttrs:	minilibx_mac/mlx_new_window.h	/^- (id) initWithRect: (NSRect)rect andTitle: (NSString *)title pfaAttrs: (NSOpenGLPixelFormatAttr/;"	m	interface:MlxWin
initWithRect:andTitle:pfaAttrs:	minilibx_mac/mlx_new_window.m	/^{$/;"	m	implementation:MlxWin
init_f_c_color	src/parse_file_colors.c	/^unsigned int	init_f_c_color(t_data *data, char *line)$/;"	f	typeref:typename:unsigned int
init_fd	src/parse_init.c	/^void	init_fd(t_data *data, int *fd, char *fname)$/;"	f	typeref:typename:void
init_null	src/parse_init.c	/^void	init_null(t_data *data, int *map_parse)$/;"	f	typeref:typename:void
init_player	src/parse_init.c	/^void	init_player(t_data *data, int x, int y, int *is_player)$/;"	f	typeref:typename:void
interlace	minilibx_mac/mlx_png.c	/^  int		interlace;$/;"	m	struct:png_info_s	typeref:typename:int	file:
is_NSEW	src/parse_check_map.c	/^int	is_NSEW(int i, int nb_mapcases)$/;"	f	typeref:typename:int
is_available_mapcase	src/parse_check_map.c	/^int	is_available_mapcase(t_data *data, int x, int y, int *is_player)$/;"	f	typeref:typename:int
is_blank_char	src/str_ft.c	/^int	is_blank_char(char c)$/;"	f	typeref:typename:int
is_blank_line	src/str_ft.c	/^int	is_blank_line(char *line)$/;"	f	typeref:typename:int
is_border	src/parse_check_map.c	/^int	is_border(t_data *data, int x, int y, int matrix_len)$/;"	f	typeref:typename:int
is_map_line	src/str_ft.c	/^int	is_map_line(char *str)$/;"	f	typeref:typename:int
is_trimable	libft/ft_strtrim.c	/^static int	is_trimable(char c, char *trimset)$/;"	f	typeref:typename:int	file:
keyDown:	minilibx_mac/mlx_new_window.m	/^{$/;"	m	implementation:NSWindowEvent
keyUp:	minilibx_mac/mlx_new_window.m	/^{$/;"	m	implementation:NSWindowEvent
key_hook	minilibx_linux/mlx_int.h	/^	int					(*key_hook)();$/;"	m	struct:s_win_list	typeref:typename:int (*)()
key_param	minilibx_linux/mlx_int.h	/^	void				*key_param;$/;"	m	struct:s_win_list	typeref:typename:void *
keyflag	minilibx_mac/mlx_new_window.h	/^  int		keyflag;$/;"	E	interface:NSWindowEvent
keyrepeat	minilibx_mac/mlx_new_window.h	/^  int		keyrepeat;$/;"	E	interface:NSWindowEvent
line	include/cub3d.h	/^	char		*line;$/;"	m	struct:s_data	typeref:typename:char *
line_len	include/cub3d.h	/^	int				line_len;$/;"	m	struct:s_image	typeref:typename:int
line_split	include/cub3d.h	/^	char		**line_split;$/;"	m	struct:s_data	typeref:typename:char **
loc_font_atlassize	minilibx_mac/mlx_int.h	/^  GLint		loc_font_atlassize;$/;"	m	struct:glsl_info_s	typeref:typename:GLint
loc_font_color	minilibx_mac/mlx_int.h	/^  GLint		loc_font_color;$/;"	m	struct:glsl_info_s	typeref:typename:GLint
loc_font_posinatlas	minilibx_mac/mlx_int.h	/^  GLint		loc_font_posinatlas;$/;"	m	struct:glsl_info_s	typeref:typename:GLint
loc_font_posinwin	minilibx_mac/mlx_int.h	/^  GLint		loc_font_posinwin;$/;"	m	struct:glsl_info_s	typeref:typename:GLint
loc_font_position	minilibx_mac/mlx_int.h	/^  GLint		loc_font_position;$/;"	m	struct:glsl_info_s	typeref:typename:GLint
loc_font_texture	minilibx_mac/mlx_int.h	/^  GLint		loc_font_texture;$/;"	m	struct:glsl_info_s	typeref:typename:GLint
loc_font_winhalfsize	minilibx_mac/mlx_int.h	/^  GLint		loc_font_winhalfsize;$/;"	m	struct:glsl_info_s	typeref:typename:GLint
loc_image_pos	minilibx_mac/mlx_int.h	/^  GLint		loc_image_pos;$/;"	m	struct:glsl_info_s	typeref:typename:GLint
loc_image_position	minilibx_mac/mlx_int.h	/^  GLint		loc_image_position;$/;"	m	struct:glsl_info_s	typeref:typename:GLint
loc_image_size	minilibx_mac/mlx_int.h	/^  GLint		loc_image_size;$/;"	m	struct:glsl_info_s	typeref:typename:GLint
loc_image_texture	minilibx_mac/mlx_int.h	/^  GLint		loc_image_texture;$/;"	m	struct:glsl_info_s	typeref:typename:GLint
loc_image_winhalfsize	minilibx_mac/mlx_int.h	/^  GLint		loc_image_winhalfsize;$/;"	m	struct:glsl_info_s	typeref:typename:GLint
loc_pixel_position	minilibx_mac/mlx_int.h	/^  GLint		loc_pixel_position;$/;"	m	struct:glsl_info_s	typeref:typename:GLint
loc_pixel_texture	minilibx_mac/mlx_int.h	/^  GLint		loc_pixel_texture;$/;"	m	struct:glsl_info_s	typeref:typename:GLint
loc_pixel_winhalfsize	minilibx_mac/mlx_int.h	/^  GLint		loc_pixel_winhalfsize;$/;"	m	struct:glsl_info_s	typeref:typename:GLint
log_type	include/cub3d.h	/^enum log_type { DATA, PARAM, PLAYER, MAP };$/;"	g
loop_hook	minilibx_linux/mlx_int.h	/^	int			(*loop_hook)();$/;"	m	struct:s_xvar	typeref:typename:int (*)()
loop_hook	minilibx_mac/mlx_int.h	/^  void			(*loop_hook)(void *);$/;"	m	struct:mlx_ptr_s	typeref:typename:void (*)(void *)
loop_hook_data	minilibx_mac/mlx_int.h	/^  void			*loop_hook_data;$/;"	m	struct:mlx_ptr_s	typeref:typename:void *
loop_param	minilibx_linux/mlx_int.h	/^	void		*loop_param;$/;"	m	struct:s_xvar	typeref:typename:void *
loop_timer	minilibx_mac/mlx_int.h	/^  void			*loop_timer;$/;"	m	struct:mlx_ptr_s	typeref:typename:void *
magic	minilibx_mac/mlx_png.c	/^unsigned char magic[PNG_MAGIC_SIZE] = {137, 80, 78, 71, 13, 10, 26, 10};$/;"	v	typeref:typename:unsigned char[]
main	src/main.c	/^int	main(int argc, char *argv[])$/;"	f	typeref:typename:int
main_loop_active	minilibx_mac/mlx_int.h	/^  int			main_loop_active;$/;"	m	struct:mlx_ptr_s	typeref:typename:int
make_point	src/vector_ft.c	/^t_point	make_point(int x, int y)$/;"	f	typeref:typename:t_point
make_str	libft/ft_itoa.c	/^static void	make_str(int *n, char *n_str, int i)$/;"	f	typeref:typename:void	file:
make_tab	libft/ft_split.c	/^static char	**make_tab(char **returned, char const *s, char c, unsigned int nb_wd)$/;"	f	typeref:typename:char **	file:
malloc_data	src/main.c	/^ t_data	*malloc_data(void)$/;"	f	typeref:typename:t_data *
map	include/cub3d.h	/^	char		**map;$/;"	m	struct:s_data	typeref:typename:char **
mask	minilibx_linux/mlx_int.h	/^	int		mask;$/;"	m	struct:s_event_list	typeref:typename:int
mipng_crc	minilibx_mac/mlx_png.c	/^int	mipng_crc(unsigned char *ptr, int len)$/;"	f	typeref:typename:int
mipng_data	minilibx_mac/mlx_png.c	/^int	mipng_data(mlx_img_list_t *img, unsigned char *dat, png_info_t *pi)$/;"	f	typeref:typename:int
mipng_defilter	minilibx_mac/mlx_png.c	/^unsigned char (*(mipng_defilter[]))(unsigned char *buff, int pos, int a, int b, int c) =$/;"	v	typeref:typename:unsigned char (* ([]))(unsigned char * buff,int pos,int a,int b,int c)
mipng_defilter_average	minilibx_mac/mlx_png.c	/^unsigned char mipng_defilter_average(unsigned char *buff, int pos, int a, int b, int c)$/;"	f	typeref:typename:unsigned char
mipng_defilter_none	minilibx_mac/mlx_png.c	/^unsigned char mipng_defilter_none(unsigned char *buff, int pos, int a, int b, int c)$/;"	f	typeref:typename:unsigned char
mipng_defilter_paeth	minilibx_mac/mlx_png.c	/^unsigned char mipng_defilter_paeth(unsigned char *buff, int pos, int a, int b, int c)$/;"	f	typeref:typename:unsigned char
mipng_defilter_sub	minilibx_mac/mlx_png.c	/^unsigned char mipng_defilter_sub(unsigned char *buff, int pos, int a, int b, int c)$/;"	f	typeref:typename:unsigned char
mipng_defilter_up	minilibx_mac/mlx_png.c	/^unsigned char mipng_defilter_up(unsigned char *buff, int pos, int a, int b, int c)$/;"	f	typeref:typename:unsigned char
mipng_err	minilibx_mac/mlx_png.c	/^char *(mipng_err[]) =$/;"	v	typeref:typename:char * ([])
mipng_fill_img	minilibx_mac/mlx_png.c	/^int	mipng_fill_img(mlx_img_list_t *img, unsigned char *buf, png_info_t *pi)$/;"	f	typeref:typename:int
mipng_is_type	minilibx_mac/mlx_png.c	/^int	mipng_is_type(unsigned char *ptr, char *type)$/;"	f	typeref:typename:int
mipng_magic	minilibx_mac/mlx_png.c	/^int	mipng_magic(unsigned char *ptr, int size)$/;"	f	typeref:typename:int
mipng_structure	minilibx_mac/mlx_png.c	/^int	mipng_structure(unsigned char *ptr, int size, unsigned char **hdr, unsigned char **dat)$/;"	f	typeref:typename:int
mipng_verif_hdr	minilibx_mac/mlx_png.c	/^int	mipng_verif_hdr(unsigned char *hdr, png_info_t *pi)$/;"	f	typeref:typename:int
mlx_X_error	minilibx_linux/mlx_new_image.c	/^int	mlx_X_error;$/;"	v	typeref:typename:int
mlx_clear_window	minilibx_linux/mlx_clear_window.c	/^int		mlx_clear_window(t_xvar *xvar,t_win_list *win)$/;"	f	typeref:typename:int
mlx_clear_window	minilibx_mac/mlx_new_window.m	/^void mlx_clear_window(mlx_ptr_t *mlx_ptr, mlx_win_list_t *win_ptr)$/;"	f
mlx_col_name	minilibx_linux/mlx_rgb.c	/^struct s_col_name mlx_col_name[] =$/;"	v	typeref:struct:s_col_name[]
mlx_col_name	minilibx_mac/mlx_rgb.c	/^struct s_col_name mlx_col_name[] =$/;"	v	typeref:struct:s_col_name[]
mlx_destroy_display	minilibx_linux/mlx_destroy_display.c	/^int	mlx_destroy_display(t_xvar *xvar)$/;"	f	typeref:typename:int
mlx_destroy_image	minilibx_linux/mlx_destroy_image.c	/^int	mlx_destroy_image(t_xvar *xvar, t_img *img)$/;"	f	typeref:typename:int
mlx_destroy_image	minilibx_mac/mlx_new_image.m	/^int     mlx_destroy_image(mlx_ptr_t *mlx_ptr, mlx_img_list_t *img_todel)$/;"	f
mlx_destroy_window	minilibx_linux/mlx_destroy_window.c	/^int	mlx_destroy_window(t_xvar *xvar,t_win_list *win)$/;"	f	typeref:typename:int
mlx_destroy_window	minilibx_mac/mlx_new_window.m	/^int     mlx_destroy_window(mlx_ptr_t *mlx_ptr, mlx_win_list_t *win_to_del)$/;"	f
mlx_do_key_autorepeatoff	minilibx_linux/mlx_hook.c	/^int	mlx_do_key_autorepeatoff(t_xvar *xvar)$/;"	f	typeref:typename:int
mlx_do_key_autorepeatoff	minilibx_mac/mlx_new_window.m	/^int     mlx_do_key_autorepeatoff(mlx_ptr_t *mlx_ptr)$/;"	f
mlx_do_key_autorepeaton	minilibx_linux/mlx_hook.c	/^int	mlx_do_key_autorepeaton(t_xvar *xvar)$/;"	f	typeref:typename:int
mlx_do_key_autorepeaton	minilibx_mac/mlx_new_window.m	/^int     mlx_do_key_autorepeaton(mlx_ptr_t *mlx_ptr)$/;"	f
mlx_do_sync	minilibx_linux/mlx_hook.c	/^int	mlx_do_sync(t_xvar *xvar)$/;"	f	typeref:typename:int
mlx_do_sync	minilibx_mac/mlx_init_loop.m	/^int     mlx_do_sync(mlx_ptr_t *mlx_ptr)$/;"	f
mlx_expose_hook	minilibx_linux/mlx_expose_hook.c	/^int		mlx_expose_hook(t_win_list *win,int (*funct)(),void *param)$/;"	f	typeref:typename:int
mlx_expose_hook	minilibx_mac/mlx_new_window.m	/^void mlx_expose_hook(mlx_win_list_t *win_ptr, int (*funct_ptr)(), void *param)$/;"	f
mlx_ext_fullscreen	minilibx_linux/mlx_ext_randr.c	/^int			mlx_ext_fullscreen(t_xvar *xvar, t_win_list *win, int fullscreen)$/;"	f	typeref:typename:int
mlx_flush_event	minilibx_linux/mlx_flush_event.c	/^int	mlx_flush_event(t_xvar *xvar)$/;"	f	typeref:typename:int
mlx_get_color_value	minilibx_linux/mlx_get_color_value.c	/^int             mlx_get_color_value(t_xvar *xvar,int color)$/;"	f	typeref:typename:int
mlx_get_color_value	minilibx_mac/mlx_new_image.m	/^unsigned int    mlx_get_color_value(mlx_ptr_t *mlx_ptr, int color)$/;"	f
mlx_get_data_addr	minilibx_linux/mlx_get_data_addr.c	/^char	*mlx_get_data_addr(t_img *img,int *bits_per_pixel,$/;"	f	typeref:typename:char *
mlx_get_data_addr	minilibx_mac/mlx_new_image.m	/^char    *mlx_get_data_addr(mlx_img_list_t *img_ptr, int *bits_per_pixel, int *size_line, int *en/;"	f
mlx_get_screen_size	minilibx_linux/mlx_screen_size.c	/^int		mlx_get_screen_size(void *mlx_ptr, int *sizex, int *sizey)$/;"	f	typeref:typename:int
mlx_gl_draw	minilibx_mac/mlx_new_window.h	/^- (void) mlx_gl_draw;$/;"	m	interface:MlxWin
mlx_gl_draw	minilibx_mac/mlx_new_window.m	/^{$/;"	m	implementation:MlxWin
mlx_gl_draw_font:andCtx:andX:andY:andColor:glyphX:glyphY:	minilibx_mac/mlx_new_window.h	/^- (void) mlx_gl_draw_font:(mlx_img_list_t *)img andCtx:(mlx_img_ctx_t *)imgctx andX:(int)x andY:/;"	m	interface:MlxWin
mlx_gl_draw_font:andCtx:andX:andY:andColor:glyphX:glyphY:	minilibx_mac/mlx_new_window.m	/^{$/;"	m	implementation:MlxWin
mlx_gl_draw_img:andCtx:andX:andY:	minilibx_mac/mlx_new_window.h	/^- (void) mlx_gl_draw_img:(mlx_img_list_t *)img andCtx:(mlx_img_ctx_t *)imgctx andX:(int)x andY:(/;"	m	interface:MlxWin
mlx_gl_draw_img:andCtx:andX:andY:	minilibx_mac/mlx_new_window.m	/^{$/;"	m	implementation:MlxWin
mlx_hook	minilibx_linux/mlx_hook.c	/^int	mlx_hook(t_win_list *win, int x_event, int x_mask, $/;"	f	typeref:typename:int
mlx_hook	minilibx_mac/mlx_new_window.m	/^void mlx_hook(mlx_win_list_t *win_ptr, int x_event, int x_mask, int (*funct_ptr)(), void *param)$/;"	f
mlx_img_ctx_s	minilibx_mac/mlx_int.h	/^typedef struct	mlx_img_ctx_s$/;"	s
mlx_img_ctx_t	minilibx_mac/mlx_int.h	/^} mlx_img_ctx_t;$/;"	t	typeref:struct:mlx_img_ctx_s
mlx_img_list_s	minilibx_mac/mlx_int.h	/^typedef struct	mlx_img_list_s$/;"	s
mlx_img_list_t	minilibx_mac/mlx_int.h	/^} mlx_img_list_t;$/;"	t	typeref:struct:mlx_img_list_s
mlx_init	minilibx_linux/mlx_init.c	/^void	*mlx_init()$/;"	f	typeref:typename:void *
mlx_init	minilibx_mac/mlx_init_loop.m	/^void *mlx_init()$/;"	f
mlx_int_anti_resize_win	minilibx_linux/mlx_int_anti_resize_win.c	/^int	mlx_int_anti_resize_win(t_xvar *xvar,Window win,int w,int h)$/;"	f	typeref:typename:int
mlx_int_deal_shm	minilibx_linux/mlx_init.c	/^int		mlx_int_deal_shm(t_xvar *xvar)$/;"	f	typeref:typename:int
mlx_int_do_nothing	minilibx_linux/mlx_int_do_nothing.c	/^int	mlx_int_do_nothing(void *param)$/;"	f	typeref:typename:int
mlx_int_egal_img	minilibx_linux/mlx_lib_xpm.c	/^int	mlx_int_egal_img(XImage *img1,XImage *img2)$/;"	f	typeref:typename:int
mlx_int_file_get_rid_comment	minilibx_linux/mlx_xpm.c	/^int	mlx_int_file_get_rid_comment(char *ptr, int size)$/;"	f	typeref:typename:int
mlx_int_file_get_rid_comment	minilibx_mac/mlx_xpm.c	/^void	mlx_int_file_get_rid_comment(char *ptr, int size)$/;"	f	typeref:typename:void
mlx_int_get_col_name	minilibx_linux/mlx_xpm.c	/^int	mlx_int_get_col_name(char *str,int size)$/;"	f	typeref:typename:int
mlx_int_get_col_name	minilibx_mac/mlx_xpm.c	/^int	mlx_int_get_col_name(char *str,int size)$/;"	f	typeref:typename:int
mlx_int_get_good_color	minilibx_linux/mlx_get_color_value.c	/^int		mlx_int_get_good_color(t_xvar *xvar,int color)$/;"	f	typeref:typename:int
mlx_int_get_line	minilibx_linux/mlx_xpm.c	/^char	*mlx_int_get_line(char *ptr,int *pos,int size)$/;"	f	typeref:typename:char *
mlx_int_get_line	minilibx_mac/mlx_xpm.c	/^char	*mlx_int_get_line(char *ptr,int *pos,int size)$/;"	f	typeref:typename:char *
mlx_int_get_text_rgb	minilibx_linux/mlx_xpm.c	/^int	mlx_int_get_text_rgb(char *name, char *end)$/;"	f	typeref:typename:int
mlx_int_get_text_rgb	minilibx_mac/mlx_xpm.c	/^int	mlx_int_get_text_rgb(char *name, char *end)$/;"	f	typeref:typename:int
mlx_int_get_visual	minilibx_linux/mlx_int_get_visual.c	/^int		mlx_int_get_visual(t_xvar *xvar)$/;"	f	typeref:typename:int
mlx_int_loop_once	minilibx_mac/mlx_init_loop.m	/^void	mlx_int_loop_once()$/;"	f
mlx_int_new_image	minilibx_linux/mlx_new_image.c	/^void	*mlx_int_new_image(t_xvar *xvar,int width, int height,int format)$/;"	f	typeref:typename:void *
mlx_int_new_xshm_image	minilibx_linux/mlx_new_image.c	/^void	*mlx_int_new_xshm_image(t_xvar *xvar,int width,int height,int format)$/;"	f	typeref:typename:void *
mlx_int_param_ButtonPress	minilibx_linux/mlx_int_param_event.c	/^int	mlx_int_param_ButtonPress(t_xvar *xvar, XEvent *ev, t_win_list *win)$/;"	f	typeref:typename:int
mlx_int_param_ButtonRelease	minilibx_linux/mlx_int_param_event.c	/^int	mlx_int_param_ButtonRelease(t_xvar *xvar, XEvent *ev, t_win_list *win)$/;"	f	typeref:typename:int
mlx_int_param_Expose	minilibx_linux/mlx_int_param_event.c	/^int	mlx_int_param_Expose(t_xvar *xvar, XEvent *ev, t_win_list *win)$/;"	f	typeref:typename:int
mlx_int_param_KeyPress	minilibx_linux/mlx_int_param_event.c	/^int	mlx_int_param_KeyPress(t_xvar *xvar, XEvent *ev, t_win_list *win)$/;"	f	typeref:typename:int
mlx_int_param_KeyRelease	minilibx_linux/mlx_int_param_event.c	/^int	mlx_int_param_KeyRelease(t_xvar *xvar, XEvent *ev, t_win_list *win)$/;"	f	typeref:typename:int
mlx_int_param_MotionNotify	minilibx_linux/mlx_int_param_event.c	/^int	mlx_int_param_MotionNotify(t_xvar *xvar, XEvent *ev, t_win_list *win)$/;"	f	typeref:typename:int
mlx_int_param_event	minilibx_linux/mlx_int_param_event.c	/^int	(*(mlx_int_param_event[]))() =$/;"	v	typeref:typename:int (* ([]))()
mlx_int_param_generic	minilibx_linux/mlx_int_param_event.c	/^int	mlx_int_param_generic(t_xvar *xvar, XEvent *ev, t_win_list *win)$/;"	f	typeref:typename:int
mlx_int_param_undef	minilibx_linux/mlx_int_param_event.c	/^int	mlx_int_param_undef()$/;"	f	typeref:typename:int
mlx_int_parse_png	minilibx_mac/mlx_png.c	/^mlx_img_list_t	*mlx_int_parse_png(mlx_ptr_t *xvar, unsigned char *fptr, int size)$/;"	f	typeref:typename:mlx_img_list_t *
mlx_int_parse_xpm	minilibx_linux/mlx_xpm.c	/^void	*mlx_int_parse_xpm(t_xvar *xvar,void *info,int info_size,char *(*f)())$/;"	f	typeref:typename:void *
mlx_int_parse_xpm	minilibx_mac/mlx_xpm.c	/^void	*mlx_int_parse_xpm(mlx_ptr_t *xvar,void *info,int info_size,char *(*f)())$/;"	f	typeref:typename:void *
mlx_int_rgb_conversion	minilibx_linux/mlx_init.c	/^int		mlx_int_rgb_conversion(t_xvar *xvar)$/;"	f	typeref:typename:int
mlx_int_set_win_event_mask	minilibx_linux/mlx_int_set_win_event_mask.c	/^int	mlx_int_set_win_event_mask(t_xvar *xvar)$/;"	f	typeref:typename:int
mlx_int_static_line	minilibx_linux/mlx_xpm.c	/^char	*mlx_int_static_line(char **xpm_data,int *pos,int size)$/;"	f	typeref:typename:char *
mlx_int_static_line	minilibx_mac/mlx_xpm.c	/^char	*mlx_int_static_line(char **xpm_data,int *pos,int size)$/;"	f	typeref:typename:char *
mlx_int_str_str	minilibx_linux/mlx_int_str_to_wordtab.c	/^int	mlx_int_str_str(char *str,char *find,int len)$/;"	f	typeref:typename:int
mlx_int_str_str	minilibx_mac/mlx_int_str_to_wordtab.c	/^int	mlx_int_str_str(char *str,char *find,int len)$/;"	f	typeref:typename:int
mlx_int_str_str_cote	minilibx_linux/mlx_int_str_to_wordtab.c	/^int	mlx_int_str_str_cote(char *str,char *find,int len)$/;"	f	typeref:typename:int
mlx_int_str_str_cote	minilibx_mac/mlx_int_str_to_wordtab.c	/^int	mlx_int_str_str_cote(char *str,char *find,int len)$/;"	f	typeref:typename:int
mlx_int_str_to_wordtab	minilibx_linux/mlx_int_str_to_wordtab.c	/^char	**mlx_int_str_to_wordtab(char *str)$/;"	f	typeref:typename:char **
mlx_int_str_to_wordtab	minilibx_mac/mlx_int_str_to_wordtab.c	/^char	**mlx_int_str_to_wordtab(char *str)$/;"	f	typeref:typename:char **
mlx_int_wait_first_expose	minilibx_linux/mlx_int_wait_first_expose.c	/^int	mlx_int_wait_first_expose(t_xvar *xvar,Window win)$/;"	f	typeref:typename:int
mlx_int_xpm_f_image	minilibx_linux/mlx_lib_xpm.c	/^void		*mlx_int_xpm_f_image(t_xvar *xvar,int *width,int *height,$/;"	f	typeref:typename:void *
mlx_int_xpm_set_pointel	minilibx_linux/mlx_xpm.c	/^int	mlx_int_xpm_set_pointel(t_img *img, char *data, int opp, int col, int x)$/;"	f	typeref:typename:int
mlx_int_xpm_set_pointel	minilibx_mac/mlx_xpm.c	/^void	mlx_int_xpm_set_pointel(mlx_img_list_t *img, char *data, int opp, int col, int x)$/;"	f	typeref:typename:void
mlx_key_hook	minilibx_linux/mlx_key_hook.c	/^int		mlx_key_hook(t_win_list *win,int (*funct)(),void *param)$/;"	f	typeref:typename:int
mlx_key_hook	minilibx_mac/mlx_new_window.m	/^void mlx_key_hook(mlx_win_list_t *win_ptr, int (*funct_ptr)(), void *param)$/;"	f
mlx_loop	minilibx_linux/mlx_loop.c	/^int			mlx_loop(t_xvar *xvar)$/;"	f	typeref:typename:int
mlx_loop	minilibx_mac/mlx_init_loop.m	/^void mlx_loop(mlx_ptr_t *mlx_ptr)$/;"	f
mlx_loop_end	minilibx_linux/mlx_loop.c	/^int			mlx_loop_end(t_xvar *xvar)$/;"	f	typeref:typename:int
mlx_loop_hook	minilibx_linux/mlx_loop_hook.c	/^int	mlx_loop_hook(t_xvar *xvar,int (*funct)(),void *param)$/;"	f	typeref:typename:int
mlx_loop_hook	minilibx_mac/mlx_init_loop.m	/^int mlx_loop_hook(mlx_ptr_t *mlx_ptr, void (*fct)(void *), void *param)$/;"	f
mlx_mouse_get_pos	minilibx_linux/mlx_mouse.c	/^int		mlx_mouse_get_pos(t_xvar *xvar, t_win_list *win, \\$/;"	f	typeref:typename:int
mlx_mouse_get_pos	minilibx_mac/mlx_mouse.m	/^int	mlx_mouse_get_pos(mlx_win_list_t *win, int *x, int *y)$/;"	f
mlx_mouse_hide	minilibx_linux/mlx_mouse.c	/^int		mlx_mouse_hide(t_xvar *xvar, t_win_list *win)$/;"	f	typeref:typename:int
mlx_mouse_hide	minilibx_mac/mlx_mouse.m	/^int	mlx_mouse_hide()$/;"	f
mlx_mouse_hook	minilibx_linux/mlx_mouse_hook.c	/^int		mlx_mouse_hook(t_win_list *win,int (*funct)(),void *param)$/;"	f	typeref:typename:int
mlx_mouse_hook	minilibx_mac/mlx_new_window.m	/^void mlx_mouse_hook(mlx_win_list_t *win_ptr, int (*funct_ptr)(), void *param)$/;"	f
mlx_mouse_move	minilibx_linux/mlx_mouse.c	/^int		mlx_mouse_move(t_xvar *xvar, t_win_list *win, int x, int y)$/;"	f	typeref:typename:int
mlx_mouse_move	minilibx_mac/mlx_mouse.m	/^int	mlx_mouse_move(mlx_win_list_t *win, int x, int y)$/;"	f
mlx_mouse_show	minilibx_linux/mlx_mouse.c	/^int		mlx_mouse_show(t_xvar *xvar, t_win_list *win)$/;"	f	typeref:typename:int
mlx_mouse_show	minilibx_mac/mlx_mouse.m	/^int	mlx_mouse_show()$/;"	f
mlx_new_image	minilibx_linux/mlx_new_image.c	/^void	*mlx_new_image(t_xvar *xvar,int width, int height)$/;"	f	typeref:typename:void *
mlx_new_image	minilibx_mac/mlx_new_image.m	/^void    *mlx_new_image(mlx_ptr_t *mlx_ptr, int width, int height)$/;"	f
mlx_new_image2	minilibx_linux/mlx_new_image.c	/^void	*mlx_new_image2(t_xvar *xvar,int width, int height)$/;"	f	typeref:typename:void *
mlx_new_opengl_window	minilibx_mac/mlx_opengl.m	/^void	*mlx_new_opengl_window(mlx_ptr_t *mlx_ptr, int size_x, int size_y, char *title)$/;"	f
mlx_new_window	minilibx_linux/mlx_new_window.c	/^void	*mlx_new_window(t_xvar *xvar,int size_x,int size_y,char *title)$/;"	f	typeref:typename:void *
mlx_new_window	minilibx_mac/mlx_new_window.m	/^void *mlx_new_window(mlx_ptr_t *mlx_ptr, int size_x, int size_y, char *title)$/;"	f
mlx_opengl_swap_buffers	minilibx_mac/mlx_opengl.m	/^int	mlx_opengl_swap_buffers(mlx_win_list_t *win_ptr)$/;"	f
mlx_opengl_window_set_context	minilibx_mac/mlx_opengl.m	/^int	mlx_opengl_window_set_context(mlx_win_list_t *win_ptr)$/;"	f
mlx_pixel_put	minilibx_linux/mlx_pixel_put.c	/^int		mlx_pixel_put(t_xvar *xvar,t_win_list *win,$/;"	f	typeref:typename:int
mlx_pixel_put	minilibx_mac/mlx_init_loop.m	/^void mlx_pixel_put(mlx_ptr_t *mlx_ptr, mlx_win_list_t *win_ptr, int x, int y, int color)$/;"	f
mlx_png_file_to_image	minilibx_mac/mlx_png.c	/^void	*mlx_png_file_to_image(mlx_ptr_t *xvar, char *file, int *width, int *height)$/;"	f	typeref:typename:void *
mlx_ptr	include/cub3d.h	/^	void			*mlx_ptr;$/;"	m	struct:s_image	typeref:typename:void *
mlx_ptr_s	minilibx_mac/mlx_int.h	/^typedef struct		mlx_ptr_s$/;"	s
mlx_ptr_t	minilibx_mac/mlx_int.h	/^} mlx_ptr_t;$/;"	t	typeref:struct:mlx_ptr_s
mlx_put_image_to_window	minilibx_linux/mlx_put_image_to_window.c	/^int	mlx_put_image_to_window(t_xvar *xvar,t_win_list *win,t_img *img,$/;"	f	typeref:typename:int
mlx_put_image_to_window	minilibx_mac/mlx_new_image.m	/^void    mlx_put_image_to_window(mlx_ptr_t *mlx_ptr, mlx_win_list_t *win_ptr, mlx_img_list_t *img/;"	f
mlx_set_font	minilibx_linux/mlx_set_font.c	/^void	mlx_set_font(t_xvar *xvar, t_win_list *win, char *name)$/;"	f	typeref:typename:void
mlx_shaders	minilibx_mac/mlx_shaders.c	/^int mlx_shaders(glsl_info_t *glsl)$/;"	f	typeref:typename:int
mlx_shaders_font	minilibx_mac/mlx_shaders.c	/^int mlx_shaders_font(glsl_info_t *glsl)$/;"	f	typeref:typename:int
mlx_shaders_image	minilibx_mac/mlx_shaders.c	/^int mlx_shaders_image(glsl_info_t *glsl)$/;"	f	typeref:typename:int
mlx_shaders_pixel	minilibx_mac/mlx_shaders.c	/^int mlx_shaders_pixel(glsl_info_t *glsl)$/;"	f	typeref:typename:int
mlx_string_put	minilibx_linux/mlx_string_put.c	/^int		mlx_string_put(t_xvar *xvar,t_win_list *win,$/;"	f	typeref:typename:int
mlx_string_put	minilibx_mac/mlx_new_image.m	/^int mlx_string_put(mlx_ptr_t *mlx_ptr, mlx_win_list_t *win_ptr, int x, int y, int color, unsigne/;"	f
mlx_win_list_s	minilibx_mac/mlx_int.h	/^typedef struct	mlx_win_list_s$/;"	s
mlx_win_list_t	minilibx_mac/mlx_int.h	/^} mlx_win_list_t;$/;"	t	typeref:struct:mlx_win_list_s
mlx_xpm_file_to_image	minilibx_linux/mlx_lib_xpm.c	/^void	*mlx_xpm_file_to_image(t_xvar *xvar,char *filename,$/;"	f	typeref:typename:void *
mlx_xpm_file_to_image	minilibx_linux/mlx_xpm.c	/^void	*mlx_xpm_file_to_image(t_xvar *xvar,char *file,int *width,int *height)$/;"	f	typeref:typename:void *
mlx_xpm_file_to_image	minilibx_mac/mlx_xpm.c	/^void	*mlx_xpm_file_to_image(mlx_ptr_t *xvar,char *file,int *width,int *height)$/;"	f	typeref:typename:void *
mlx_xpm_to_image	minilibx_linux/mlx_lib_xpm.c	/^void	*mlx_xpm_to_image(t_xvar *xvar,char **data,int *width,int *height)$/;"	f	typeref:typename:void *
mlx_xpm_to_image	minilibx_linux/mlx_xpm.c	/^void	*mlx_xpm_to_image(t_xvar *xvar,char **xpm_data,int *width,int *height)$/;"	f	typeref:typename:void *
mlx_xpm_to_image	minilibx_mac/mlx_xpm.c	/^void	*mlx_xpm_to_image(mlx_ptr_t *xvar,char **xpm_data,int *width,int *height)$/;"	f	typeref:typename:void *
mouseDown:	minilibx_mac/mlx_new_window.m	/^{$/;"	m	implementation:NSWindowEvent
mouseDragged:	minilibx_mac/mlx_new_window.m	/^{$/;"	m	implementation:NSWindowEvent
mouseMoved:	minilibx_mac/mlx_new_window.m	/^{$/;"	m	implementation:NSWindowEvent
mouseUp:	minilibx_mac/mlx_new_window.m	/^{$/;"	m	implementation:NSWindowEvent
mouse_hook	minilibx_linux/mlx_int.h	/^	int					(*mouse_hook)();$/;"	m	struct:s_win_list	typeref:typename:int (*)()
mouse_param	minilibx_linux/mlx_int.h	/^	void				*mouse_param;$/;"	m	struct:s_win_list	typeref:typename:void *
move_player	src/move_player.c	/^int	move_player(t_data *data, int move)$/;"	f	typeref:typename:int
my_loc	libft/ft_itoa.c	/^static char	*my_loc(int len)$/;"	f	typeref:typename:char *	file:
name	minilibx_linux/mlx_int.h	/^	char	*name;$/;"	m	struct:s_col_name	typeref:typename:char *
name	minilibx_linux/mlx_int.h	/^	int		name;$/;"	m	struct:s_xpm_col	typeref:typename:int
name	minilibx_mac/mlx_xpm.c	/^  char  *name;$/;"	m	struct:s_col_name	typeref:typename:char *	file:
name	minilibx_mac/mlx_xpm.c	/^  int           name;$/;"	m	struct:s_xpm_col	typeref:typename:int	file:
nb_flush	minilibx_mac/mlx_int.h	/^  int			nb_flush;$/;"	m	struct:mlx_win_list_s	typeref:typename:int
next	minilibx_linux/mlx_int.h	/^	struct s_win_list	*next;$/;"	m	struct:s_win_list	typeref:struct:s_win_list *
next	minilibx_mac/mlx_int.h	/^  struct mlx_img_ctx_s	*next;$/;"	m	struct:mlx_img_ctx_s	typeref:struct:mlx_img_ctx_s *
next	minilibx_mac/mlx_int.h	/^  struct mlx_img_list_s	*next;$/;"	m	struct:mlx_img_list_s	typeref:struct:mlx_img_list_s *
next	minilibx_mac/mlx_int.h	/^  struct mlx_win_list_s	*next;$/;"	m	struct:mlx_win_list_s	typeref:struct:mlx_win_list_s *
north_crossing	src/move_crossing_box.c	/^int	north_crossing(t_data *data)$/;"	f	typeref:typename:int
openglwin	minilibx_mac/mlx_new_window.h	/^  int			openglwin;$/;"	E	interface:MlxWin
otherMouseDown:	minilibx_mac/mlx_new_window.m	/^{$/;"	m	implementation:NSWindowEvent
otherMouseDragged:	minilibx_mac/mlx_new_window.m	/^{$/;"	m	implementation:NSWindowEvent
otherMouseUp:	minilibx_mac/mlx_new_window.m	/^{$/;"	m	implementation:NSWindowEvent
param	minilibx_linux/mlx_int.h	/^	void	*param;$/;"	m	struct:s_event_list	typeref:typename:void *
parse_file	src/parse_import.c	/^void	parse_file(char *fname, t_data	* data)$/;"	f	typeref:typename:void
parsing_loop	src/parse_import.c	/^int	parsing_loop(t_data *data, int *map_parse)$/;"	f	typeref:typename:int
pix	minilibx_linux/mlx_int.h	/^	Pixmap			pix;$/;"	m	struct:s_img	typeref:typename:Pixmap
pixelPutColor:X:Y:	minilibx_mac/mlx_new_window.h	/^- (void) pixelPutColor: (int)color X:(int)x Y:(int)y;$/;"	m	interface:MlxWin
pixelPutColor:X:Y:	minilibx_mac/mlx_new_window.m	/^{$/;"	m	implementation:MlxWin
pixel_data	minilibx_mac/font.c	/^  unsigned char	 pixel_data[1140 * 20 * 4 + 1];$/;"	m	struct:__anon9577d4a80108	typeref:typename:unsigned char[]	file:
pixel_fshader	minilibx_mac/mlx_int.h	/^  GLuint	pixel_fshader;$/;"	m	struct:glsl_info_s	typeref:typename:GLuint
pixel_management	minilibx_mac/mlx_new_window.m	/^{$/;"	m	implementation:MlxWin
pixel_nb	minilibx_mac/mlx_new_window.h	/^  int			pixel_nb;$/;"	E	interface:MlxWin
pixel_program	minilibx_mac/mlx_int.h	/^  GLuint	pixel_program;$/;"	m	struct:glsl_info_s	typeref:typename:GLuint
pixel_texture	minilibx_mac/mlx_new_window.h	/^  GLuint		pixel_texture;$/;"	E	interface:MlxWin
pixel_vbuffer	minilibx_mac/mlx_new_window.h	/^  GLuint		pixel_vbuffer;$/;"	E	interface:MlxWin
pixel_vshader	minilibx_mac/mlx_int.h	/^  GLuint	pixel_vshader;$/;"	m	struct:glsl_info_s	typeref:typename:GLuint
pixmgt	minilibx_mac/mlx_int.h	/^  int			pixmgt;$/;"	m	struct:mlx_win_list_s	typeref:typename:int
pixtexbuff	minilibx_mac/mlx_new_window.h	/^  unsigned int		*pixtexbuff;$/;"	E	interface:MlxWin
plane	include/cub3d.h	/^	t_vector	plane;$/;"	m	struct:s_player	typeref:typename:t_vector
player	include/cub3d.h	/^	t_player	*player;$/;"	m	struct:s_data	typeref:typename:t_player *
png_info_s	minilibx_mac/mlx_png.c	/^typedef struct png_info_s$/;"	s	file:
png_info_t	minilibx_mac/mlx_png.c	/^} png_info_t;$/;"	t	typeref:struct:png_info_s	file:
pos_box	include/cub3d.h	/^	t_point		pos_box;$/;"	m	struct:s_player	typeref:typename:t_point
pos_map	include/cub3d.h	/^	t_point		pos_map;$/;"	m	struct:s_player	typeref:typename:t_point
print_data	src/debug_ft.c	/^void	print_data(t_data *data, int fd)$/;"	f	typeref:typename:void
print_map	src/debug_ft.c	/^void	print_map(t_data *data, int fd)$/;"	f	typeref:typename:void
print_params	src/debug_ft.c	/^void	print_params(t_data *data, int fd)$/;"	f	typeref:typename:void
print_player	src/debug_ft.c	/^void	print_player(t_data *data, int fd)$/;"	f	typeref:typename:void
private_cmap	minilibx_linux/mlx_int.h	/^	int			private_cmap;$/;"	m	struct:s_xvar	typeref:typename:int
pshm_format	minilibx_linux/mlx_int.h	/^	int			pshm_format;$/;"	m	struct:s_xvar	typeref:typename:int
re	libft/Makefile	/^re: fclean all$/;"	t
re	minilibx_mac/Makefile	/^re: clean all$/;"	t
redir_debug_file_logs	src/debug_ft.c	/^void	redir_debug_file_logs(t_data *data, char *fname, int log_type)$/;"	f	typeref:typename:void
redir_debug_file_msg	src/debug_ft.c	/^void	redir_debug_file_msg(char *fname, char *msg)$/;"	f	typeref:typename:void
refresh_ret_if_is_param	src/parse_params.c	/^static int	refresh_ret_if_is_param(char **identifiers, \\$/;"	f	typeref:typename:int	file:
rgb_conv	src/parse_file_colors.c	/^unsigned int	rgb_conv(int R, int G, int B)$/;"	f	typeref:typename:unsigned int
rightMouseDown:	minilibx_mac/mlx_new_window.m	/^{$/;"	m	implementation:NSWindowEvent
rightMouseDragged:	minilibx_mac/mlx_new_window.m	/^{$/;"	m	implementation:NSWindowEvent
rightMouseUp:	minilibx_mac/mlx_new_window.m	/^{$/;"	m	implementation:NSWindowEvent
root	minilibx_linux/mlx_int.h	/^	Window		root;$/;"	m	struct:s_xvar	typeref:typename:Window
rotate_player	src/rotate_player.c	/^void	rotate_player(t_player *player, int move)$/;"	f	typeref:typename:void
rotate_vector	src/vector_ft.c	/^void	rotate_vector(t_vector *vector, double radian_angle)$/;"	f	typeref:typename:void
s_col_name	minilibx_linux/mlx_int.h	/^struct	s_col_name$/;"	s
s_col_name	minilibx_mac/mlx_xpm.c	/^struct  s_col_name$/;"	s	file:
s_data	include/cub3d.h	/^typedef struct s_data$/;"	s
s_event_list	minilibx_linux/mlx_int.h	/^typedef struct	s_event_list$/;"	s
s_image	include/cub3d.h	/^typedef struct s_image$/;"	s
s_img	minilibx_linux/mlx_int.h	/^typedef struct	s_img$/;"	s
s_player	include/cub3d.h	/^typedef struct s_player$/;"	s
s_point	include/cub3d.h	/^typedef struct s_point$/;"	s
s_vector	include/cub3d.h	/^typedef struct s_vector$/;"	s
s_win_list	minilibx_linux/mlx_int.h	/^typedef struct	s_win_list$/;"	s
s_xpm_col	minilibx_linux/mlx_int.h	/^typedef	struct	s_xpm_col$/;"	s
s_xpm_col	minilibx_mac/mlx_xpm.c	/^typedef struct  s_xpm_col$/;"	s	file:
s_xvar	minilibx_linux/mlx_int.h	/^typedef struct	s_xvar$/;"	s
saved_mode	minilibx_linux/mlx_ext_randr.c	/^RRMode	saved_mode = 0;$/;"	v	typeref:typename:RRMode
screen	minilibx_linux/mlx_int.h	/^	int			screen;$/;"	m	struct:s_xvar	typeref:typename:int
scrollWheel:	minilibx_mac/mlx_new_window.m	/^{$/;"	m	implementation:NSWindowEvent
selectGLContext	minilibx_mac/mlx_new_window.h	/^- (void) selectGLContext;$/;"	m	interface:MlxWin
selectGLContext	minilibx_mac/mlx_new_window.m	/^{$/;"	m	implementation:MlxWin
setEvent:andFunc:andParam:	minilibx_mac/mlx_new_window.h	/^- (void) setEvent:(int)event andFunc:(func_t)func andParam:(void *)param;$/;"	m	interface:MlxWin
setEvent:andFunc:andParam:	minilibx_mac/mlx_new_window.h	/^- (void) setEvent:(int)event andFunc:(func_t)func andParam:(void *)param;$/;"	m	interface:NSWindowEvent
setEvent:andFunc:andParam:	minilibx_mac/mlx_new_window.m	/^{$/;"	m	implementation:MlxWin
setEvent:andFunc:andParam:	minilibx_mac/mlx_new_window.m	/^{$/;"	m	implementation:NSWindowEvent
setKeyRepeat:	minilibx_mac/mlx_new_window.h	/^- (void) setKeyRepeat:(int)mode;$/;"	m	interface:MlxWin
setKeyRepeat:	minilibx_mac/mlx_new_window.h	/^- (void) setKeyRepeat:(int)mode;$/;"	m	interface:NSWindowEvent
setKeyRepeat:	minilibx_mac/mlx_new_window.m	/^{$/;"	m	implementation:MlxWin
setKeyRepeat:	minilibx_mac/mlx_new_window.m	/^{$/;"	m	implementation:NSWindowEvent
shm	minilibx_linux/mlx_int.h	/^	XShmSegmentInfo	shm;$/;"	m	struct:s_img	typeref:typename:XShmSegmentInfo
shm_att_pb	minilibx_linux/mlx_new_image.c	/^int	shm_att_pb(Display *d,XErrorEvent *ev)$/;"	f	typeref:typename:int
show	minilibx_linux/Makefile	/^show:$/;"	t
size	include/cub3d.h	/^	unsigned int	size[2];$/;"	m	struct:s_image	typeref:typename:unsigned int[2]
size_line	minilibx_linux/mlx_int.h	/^	int				size_line;$/;"	m	struct:s_img	typeref:typename:int
size_x	minilibx_mac/mlx_new_window.h	/^  int			size_x;$/;"	E	interface:MlxWin
size_x	minilibx_mac/mlx_new_window.h	/^  int		size_x;$/;"	E	interface:NSWindowEvent
size_y	minilibx_mac/mlx_new_window.h	/^  int			size_y;$/;"	E	interface:MlxWin
size_y	minilibx_mac/mlx_new_window.h	/^  int		size_y;$/;"	E	interface:NSWindowEvent
slide_closest_box	src/move_to_corner.c	/^void	slide_closest_box(t_player *p, int closest_box)$/;"	f	typeref:typename:void
south_crossing	src/move_crossing_box.c	/^int	south_crossing(t_data *data)$/;"	f	typeref:typename:int
strlcpy_is_not_posix	minilibx_linux/mlx_xpm.c	/^unsigned int	strlcpy_is_not_posix(char *dest, char *src, unsigned int size)$/;"	f	typeref:typename:unsigned int
t_data	include/cub3d.h	/^}	t_data;$/;"	t	typeref:struct:s_data
t_event_list	minilibx_linux/mlx_int.h	/^}				t_event_list;$/;"	t	typeref:struct:s_event_list
t_image	include/cub3d.h	/^}	t_image;$/;"	t	typeref:struct:s_image
t_img	minilibx_linux/mlx_int.h	/^}				t_img;$/;"	t	typeref:struct:s_img
t_player	include/cub3d.h	/^}	t_player;$/;"	t	typeref:struct:s_player
t_point	include/cub3d.h	/^}	t_point;$/;"	t	typeref:struct:s_point
t_vector	include/cub3d.h	/^}	t_vector;$/;"	t	typeref:struct:s_vector
t_win_list	minilibx_linux/mlx_int.h	/^}				t_win_list;$/;"	t	typeref:struct:s_win_list
t_xpm_col	minilibx_linux/mlx_int.h	/^}				t_xpm_col;$/;"	t	typeref:struct:s_xpm_col
t_xpm_col	minilibx_mac/mlx_xpm.c	/^} t_xpm_col;$/;"	t	typeref:struct:s_xpm_col	file:
t_xvar	minilibx_linux/mlx_int.h	/^}				t_xvar;$/;"	t	typeref:struct:s_xvar
test	libft/Makefile	/^test: ctags$/;"	t
texture	minilibx_mac/mlx_int.h	/^  GLuint		texture;$/;"	m	struct:mlx_img_ctx_s	typeref:typename:GLuint
texture_path	include/cub3d.h	/^	char			*texture_path[NB_TEXTURES];$/;"	m	struct:s_image	typeref:typename:char * []
translate_pt	src/vector_ft.c	/^void	translate_pt(t_vector vector, t_point *pt)$/;"	f	typeref:typename:void
type	minilibx_linux/mlx_int.h	/^	int				type;$/;"	m	struct:s_img	typeref:typename:int
use_xshm	minilibx_linux/mlx_int.h	/^	int			use_xshm;$/;"	m	struct:s_xvar	typeref:typename:int
vbuffer	minilibx_mac/mlx_int.h	/^  GLuint		vbuffer;$/;"	m	struct:mlx_img_ctx_s	typeref:typename:GLuint
vec_scale	src/vector_ft.c	/^t_vector	vec_scale(t_vector vector, double scale)$/;"	f	typeref:typename:t_vector
vertexes	minilibx_mac/mlx_int.h	/^  GLfloat		vertexes[8];$/;"	m	struct:mlx_img_list_s	typeref:typename:GLfloat[8]
visual	minilibx_linux/mlx_int.h	/^	Visual		*visual;$/;"	m	struct:s_xvar	typeref:typename:Visual *
void	minilibx_mac/mlx_new_window.h	/^  void		*(event_param[MAX_EVENT]);$/;"	E	interface:NSWindowEvent
west_crossing	src/move_crossing_box.c	/^int	west_crossing(t_data *data)$/;"	f	typeref:typename:int
width	minilibx_linux/mlx_int.h	/^	int				width;$/;"	m	struct:s_img	typeref:typename:int
width	minilibx_mac/font.c	/^  unsigned int 	 width;$/;"	m	struct:__anon9577d4a80108	typeref:typename:unsigned int	file:
width	minilibx_mac/mlx_int.h	/^  int			width;$/;"	m	struct:mlx_img_list_s	typeref:typename:int
width	minilibx_mac/mlx_png.c	/^  unsigned int	width;$/;"	m	struct:png_info_s	typeref:typename:unsigned int	file:
win	minilibx_mac/mlx_new_window.h	/^  NSWindowEvent		*win;$/;"	E	interface:MlxWin
win	minilibx_mac/mlx_new_window.h	/^- (NSWindowEvent *) win;$/;"	m	interface:MlxWin
win	minilibx_mac/mlx_new_window.m	/^{$/;"	m	implementation:MlxWin
win_count	minilibx_linux/mlx_loop.c	/^static int	win_count(t_xvar *xvar)$/;"	f	typeref:typename:int	file:
win_list	minilibx_linux/mlx_int.h	/^	t_win_list	*win_list;$/;"	m	struct:s_xvar	typeref:typename:t_win_list *
win_list	minilibx_mac/mlx_int.h	/^  mlx_win_list_t	*win_list;$/;"	m	struct:mlx_ptr_s	typeref:typename:mlx_win_list_t *
win_ptr	include/cub3d.h	/^	void			*win_ptr;$/;"	m	struct:s_image	typeref:typename:void *
window	minilibx_linux/mlx_int.h	/^	Window				window;$/;"	m	struct:s_win_list	typeref:typename:Window
winid	minilibx_mac/mlx_int.h	/^  void			*winid;$/;"	m	struct:mlx_win_list_s	typeref:typename:void *
wm_delete_window	minilibx_linux/mlx_int.h	/^	Atom		wm_delete_window;$/;"	m	struct:s_xvar	typeref:typename:Atom
wm_protocols	minilibx_linux/mlx_int.h	/^	Atom		wm_protocols;$/;"	m	struct:s_xvar	typeref:typename:Atom
wrong_color	src/parse_file_colors.c	/^void	wrong_color(t_data *data, char *color_strimed)$/;"	f	typeref:typename:void
x	include/cub3d.h	/^	double	x;$/;"	m	struct:s_vector	typeref:typename:double
x	include/cub3d.h	/^	int	x;$/;"	m	struct:s_point	typeref:typename:int
y	include/cub3d.h	/^	double	y;$/;"	m	struct:s_vector	typeref:typename:double
y	include/cub3d.h	/^	int	y;$/;"	m	struct:s_point	typeref:typename:int
