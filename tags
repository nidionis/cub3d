!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
BACKWARD	include/cub3d.h	/^enum e_player_direction{ FORWARD, BACKWARD, RIGHT, LEFT, NB_DIRECTION };$/;"	e	enum:e_player_direction
C	include/cub3d.h	/^enum e_identifiers { NO, SO, WE, EA, F, C };$/;"	e	enum:e_identifiers
CAM	include/cub3d.h	/^enum log_type { DATA, PARAM, CAM, PLAYER, MAP };$/;"	e	enum:log_type
CAM_ANGLE	include/cub3d.h	84;"	d
CAM_QUALITY	include/cub3d.h	86;"	d
CC	libft/Makefile	/^CC = gcc$/;"	m
CC	minilibx_linux/Makefile	/^	CC = clang$/;"	m
CC	minilibx_linux/Makefile	/^CC	= gcc$/;"	m
CFLAGS	libft/Makefile	/^CFLAGS = -Wall -Wextra -Werror$/;"	m
CFLAGS	minilibx_linux/Makefile	/^CFLAGS	= -O3 -I$(INC)$/;"	m
CLIC	include/cub3d.h	54;"	d
CUB3D_H	include/cub3d.h	14;"	d
DATA	include/cub3d.h	/^enum log_type { DATA, PARAM, CAM, PLAYER, MAP };$/;"	e	enum:log_type
DEBUG_LOG_FILENAME	include/cub3d.h	88;"	d
DEFAULT_ROTATION_ANGLE	include/cub3d.h	90;"	d
DOWN_ARROW	include/cub3d.h	59;"	d
E	include/cub3d.h	/^enum e_direction { N=1, S=2, W=10, E=20, NW=11, SW=12, SE=22, NE=21 };$/;"	e	enum:e_direction
EA	include/cub3d.h	/^enum e_identifiers { NO, SO, WE, EA, F, C };$/;"	e	enum:e_identifiers
EAST	include/cub3d.h	/^enum e_cardinal { NORTH, SOUTH, EAST, WEST };$/;"	e	enum:e_cardinal
EAST_CHAR	include/cub3d.h	71;"	d
EMPTY	include/cub3d.h	67;"	d
ENV_DISPLAY	minilibx_linux/mlx_int.h	43;"	d
ERR_DATA_FILTER	minilibx_mac/mlx_png.c	35;"	d	file:
ERR_DATA_MISMATCH	minilibx_mac/mlx_png.c	34;"	d	file:
ERR_MAGIC_SIZE	minilibx_mac/mlx_png.c	24;"	d	file:
ERR_MAGIC_WRONG	minilibx_mac/mlx_png.c	25;"	d	file:
ERR_NO_TRUECOLOR	minilibx_linux/mlx_int.h	45;"	d
ERR_STRUCT_CRC	minilibx_mac/mlx_png.c	29;"	d	file:
ERR_STRUCT_DAT	minilibx_mac/mlx_png.c	31;"	d	file:
ERR_STRUCT_END	minilibx_mac/mlx_png.c	28;"	d	file:
ERR_STRUCT_HDR	minilibx_mac/mlx_png.c	27;"	d	file:
ERR_STRUCT_INCIMPL	minilibx_mac/mlx_png.c	30;"	d	file:
ERR_STRUCT_INCOMPLETE	minilibx_mac/mlx_png.c	26;"	d	file:
ERR_STRUCT_MISSCHK	minilibx_mac/mlx_png.c	32;"	d	file:
ERR_ZLIB	minilibx_mac/mlx_png.c	33;"	d	file:
EXPOSE_X	include/cub3d.h	50;"	d
F	include/cub3d.h	/^enum e_identifiers { NO, SO, WE, EA, F, C };$/;"	e	enum:e_identifiers
FLOOR	include/cub3d.h	64;"	d
FONT_HEIGHT	minilibx_mac/mlx_int.h	15;"	d
FONT_WIDTH	minilibx_mac/mlx_int.h	14;"	d
FORWARD	include/cub3d.h	/^enum e_player_direction{ FORWARD, BACKWARD, RIGHT, LEFT, NB_DIRECTION };$/;"	e	enum:e_player_direction
GREEN	include/cub3d.h	95;"	d
INC	minilibx_linux/Makefile	/^INC	=%%%%$/;"	m
IS_BLOCK	include/cub3d.h	75;"	d
KEY_A	include/cub3d.h	33;"	d
KEY_C	include/cub3d.h	40;"	d
KEY_D	include/cub3d.h	39;"	d
KEY_DOWN	include/cub3d.h	46;"	d
KEY_E	include/cub3d.h	38;"	d
KEY_ESC	include/cub3d.h	47;"	d
KEY_F	include/cub3d.h	42;"	d
KEY_IN	include/cub3d.h	48;"	d
KEY_LEFT	include/cub3d.h	44;"	d
KEY_OUT	include/cub3d.h	49;"	d
KEY_Q	include/cub3d.h	32;"	d
KEY_R	include/cub3d.h	41;"	d
KEY_RIGHT	include/cub3d.h	43;"	d
KEY_S	include/cub3d.h	36;"	d
KEY_UP	include/cub3d.h	45;"	d
KEY_W	include/cub3d.h	35;"	d
KEY_X	include/cub3d.h	37;"	d
KEY_Z	include/cub3d.h	34;"	d
LANE	include/cub3d.h	66;"	d
LEFT	include/cub3d.h	/^enum e_player_direction{ FORWARD, BACKWARD, RIGHT, LEFT, NB_DIRECTION };$/;"	e	enum:e_player_direction
LEFT_ARROW	include/cub3d.h	57;"	d
LIBFT_H	libft/libft.h	14;"	d
LOCALHOST	minilibx_linux/mlx_int.h	44;"	d
MAP	include/cub3d.h	/^enum log_type { DATA, PARAM, CAM, PLAYER, MAP };$/;"	e	enum:log_type
MAPCASES	include/cub3d.h	73;"	d
MAX_EVENT	minilibx_mac/mlx_int.h	10;"	d
MAX_PIXEL_NB	minilibx_mac/mlx_int.h	11;"	d
MLX_H	minilibx_linux/mlx.h	32;"	d
MLX_H	minilibx_mac/mlx.h	47;"	d
MLX_INT_H	minilibx_linux/mlx_int.h	19;"	d
MLX_MAX_EVENT	minilibx_linux/mlx_int.h	40;"	d
MLX_TYPE_SHM	minilibx_linux/mlx_int.h	37;"	d
MLX_TYPE_SHM_PIXMAP	minilibx_linux/mlx_int.h	36;"	d
MLX_TYPE_XIMAGE	minilibx_linux/mlx_int.h	38;"	d
N	include/cub3d.h	/^enum e_direction { N=1, S=2, W=10, E=20, NW=11, SW=12, SE=22, NE=21 };$/;"	e	enum:e_direction
NAME	libft/Makefile	/^NAME = libft.a$/;"	m
NAME	minilibx_linux/Makefile	/^NAME		= libmlx.a$/;"	m
NAME_UNAME	minilibx_linux/Makefile	/^NAME_UNAME	= libmlx_$(UNAME).a$/;"	m
NB_DIRECTION	include/cub3d.h	/^enum e_player_direction{ FORWARD, BACKWARD, RIGHT, LEFT, NB_DIRECTION };$/;"	e	enum:e_player_direction
NB_TEXTURES	include/cub3d.h	79;"	d
NE	include/cub3d.h	/^enum e_direction { N=1, S=2, W=10, E=20, NW=11, SW=12, SE=22, NE=21 };$/;"	e	enum:e_direction
NO	include/cub3d.h	/^enum e_identifiers { NO, SO, WE, EA, F, C };$/;"	e	enum:e_identifiers
NOM	minilibx_mac/Makefile	/^NOM=libmlx.a$/;"	m
NORTH	include/cub3d.h	/^enum e_cardinal { NORTH, SOUTH, EAST, WEST };$/;"	e	enum:e_cardinal
NORTH_CHAR	include/cub3d.h	68;"	d
NW	include/cub3d.h	/^enum e_direction { N=1, S=2, W=10, E=20, NW=11, SW=12, SE=22, NE=21 };$/;"	e	enum:e_direction
OBJ	minilibx_linux/Makefile	/^OBJ	= $(addprefix $(OBJ_DIR)\/,$(SRC:%.c=%.o))$/;"	m
OBJ	minilibx_mac/Makefile	/^OBJ=$(OBJ1:.m=.o)$/;"	m
OBJ1	minilibx_mac/Makefile	/^OBJ1=$(SRC:.c=.o)$/;"	m
OBJS	libft/Makefile	/^OBJS := ${SRCS:c=o}$/;"	m
OBJ_DIR	minilibx_linux/Makefile	/^OBJ_DIR = obj$/;"	m
ON_DESTROY	include/cub3d.h	51;"	d
ON_MOUSEDOWN	include/cub3d.h	55;"	d
ON_MOUSEUP	include/cub3d.h	56;"	d
PARAM	include/cub3d.h	/^enum log_type { DATA, PARAM, CAM, PLAYER, MAP };$/;"	e	enum:log_type
PI	include/cub3d.h	89;"	d
PLAYER	include/cub3d.h	/^enum log_type { DATA, PARAM, CAM, PLAYER, MAP };$/;"	e	enum:log_type
PLAYER_MAP_ARROW	include/cub3d.h	91;"	d
PNG_HDR_SIZE	minilibx_mac/mlx_png.c	20;"	d	file:
PNG_MAGIC_SIZE	minilibx_mac/mlx_png.c	18;"	d	file:
RAYCAST_QUALITY	include/cub3d.h	78;"	d
RED	include/cub3d.h	94;"	d
RETURN	minilibx_linux/mlx_xpm.c	17;"	d	file:
RETURN	minilibx_mac/mlx_xpm.c	30;"	d	file:
RIGHT	include/cub3d.h	/^enum e_player_direction{ FORWARD, BACKWARD, RIGHT, LEFT, NB_DIRECTION };$/;"	e	enum:e_player_direction
RIGH_ARROW	include/cub3d.h	58;"	d
S	include/cub3d.h	/^enum e_direction { N=1, S=2, W=10, E=20, NW=11, SW=12, SE=22, NE=21 };$/;"	e	enum:e_direction
SCREEN_HEIGHT	include/cub3d.h	77;"	d
SCREEN_WIDTH	include/cub3d.h	76;"	d
SE	include/cub3d.h	/^enum e_direction { N=1, S=2, W=10, E=20, NW=11, SW=12, SE=22, NE=21 };$/;"	e	enum:e_direction
SO	include/cub3d.h	/^enum e_identifiers { NO, SO, WE, EA, F, C };$/;"	e	enum:e_identifiers
SOUTH	include/cub3d.h	/^enum e_cardinal { NORTH, SOUTH, EAST, WEST };$/;"	e	enum:e_cardinal
SOUTH_CHAR	include/cub3d.h	69;"	d
SRC	minilibx_linux/Makefile	/^SRC	= mlx_init.c mlx_new_window.c mlx_pixel_put.c mlx_loop.c \\$/;"	m
SRC	minilibx_mac/Makefile	/^SRC= mlx_shaders.c mlx_new_window.m mlx_init_loop.m mlx_new_image.m mlx_xpm.c mlx_int_str_to_wordtab.c$/;"	m
SRCS	libft/Makefile	/^SRCS = error_msg.c ft_atoi.c ft_atoi_err.c ft_bzero.c ft_calloc.c \\$/;"	m
STEPS_PER_BOX	include/cub3d.h	81;"	d
SW	include/cub3d.h	/^enum e_direction { N=1, S=2, W=10, E=20, NW=11, SW=12, SE=22, NE=21 };$/;"	e	enum:e_direction
TOUCH_A	include/cub3d.h	17;"	d
TOUCH_D	include/cub3d.h	20;"	d
TOUCH_DOWN	include/cub3d.h	24;"	d
TOUCH_ESC	include/cub3d.h	25;"	d
TOUCH_LEFT	include/cub3d.h	22;"	d
TOUCH_RIGHT	include/cub3d.h	21;"	d
TOUCH_S	include/cub3d.h	19;"	d
TOUCH_UP	include/cub3d.h	23;"	d
TOUCH_W	include/cub3d.h	18;"	d
UNAME	minilibx_linux/Makefile	/^UNAME = $(shell uname)$/;"	m
UNIQ_BPP	minilibx_mac/mlx_int.h	12;"	d
UNITS_PER_BOX	include/cub3d.h	80;"	d
UP_ARROW	include/cub3d.h	60;"	d
W	include/cub3d.h	/^enum e_direction { N=1, S=2, W=10, E=20, NW=11, SW=12, SE=22, NE=21 };$/;"	e	enum:e_direction
WALL	include/cub3d.h	63;"	d
WALL_SIZE	include/cub3d.h	82;"	d
WARN_SHM_ATTACH	minilibx_linux/mlx_int.h	46;"	d
WE	include/cub3d.h	/^enum e_identifiers { NO, SO, WE, EA, F, C };$/;"	e	enum:e_identifiers
WEST	include/cub3d.h	/^enum e_cardinal { NORTH, SOUTH, EAST, WEST };$/;"	e	enum:e_cardinal
WEST_CHAR	include/cub3d.h	70;"	d
X_ShmAttach	minilibx_linux/mlx_new_image.c	20;"	d	file:
Z_CHUNK	minilibx_mac/mlx_png.c	22;"	d	file:
angle	include/cub3d.h	/^	int			angle;$/;"	m	struct:s_player
appid	minilibx_mac/mlx_int.h	/^  void			*appid;$/;"	m	struct:mlx_ptr_s
arRay	include/cub3d.h	/^	t_ray		arRay[CAM_QUALITY];$/;"	m	struct:s_cam
blocks	include/cub3d.h	/^	char		*blocks;$/;"	m	struct:s_data
bpp	minilibx_linux/mlx_int.h	/^	int				bpp;$/;"	m	struct:s_img
bpp	minilibx_mac/mlx_png.c	/^  int		bpp;$/;"	m	struct:png_info_s	file:
buffer	minilibx_mac/mlx_int.h	/^  char			*buffer;$/;"	m	struct:mlx_img_list_s
bytes_per_pixel	minilibx_mac/font.c	/^  unsigned int 	 bytes_per_pixel; \/* 2:RGB16, 3:RGB, 4:RGBA *\/ $/;"	m	struct:__anon1	file:
c_to_i	libft/ft_atoi.c	/^static long int	c_to_i(char c)$/;"	f	file:
c_to_i	libft/ft_atoi_err.c	/^static long int	c_to_i(char c)$/;"	f	file:
cam	include/cub3d.h	/^	t_cam		*cam;$/;"	m	struct:s_data
carry_negative	libft/ft_itoa.c	/^static char	*carry_negative(int *n, char *n_strn, int *len)$/;"	f	file:
ceiling_color	include/cub3d.h	/^	unsigned int	ceiling_color;$/;"	m	struct:s_image
check_closest_box	src/move_to_corner.c	/^int	check_closest_box(t_player *player)$/;"	f
check_map	src/parse_check_map.c	/^int	check_map(t_data *data)$/;"	f
check_map_line	src/parse_check_map.c	/^void	check_map_line(t_data *data, int y, int *nb_player)$/;"	f
check_param_not_missing	src/parse_import.c	/^void	check_param_not_missing(t_data *data)$/;"	f
check_update_box_pos	src/move_player.c	/^int	check_update_box_pos(t_data *data)$/;"	f
clean_exit	src/exit_ft.c	/^void	clean_exit(t_data *data, int exit_code)$/;"	f
clean_useless_empty_splace	src/parse_format_map.c	/^void	clean_useless_empty_splace(char	**map)$/;"	f
cmap	minilibx_linux/mlx_int.h	/^	Colormap	cmap;$/;"	m	struct:s_xvar
col	minilibx_linux/mlx_int.h	/^	int		col;$/;"	m	struct:s_xpm_col
col	minilibx_mac/mlx_xpm.c	/^  int           col;$/;"	m	struct:s_xpm_col	file:
color	minilibx_linux/mlx_int.h	/^	int		color;$/;"	m	struct:s_col_name
color	minilibx_mac/mlx_png.c	/^  int		color;$/;"	m	struct:png_info_s	file:
color	minilibx_mac/mlx_xpm.c	/^  int   color;$/;"	m	struct:s_col_name	file:
complete_line_to_width	src/parse_format_map.c	/^void	complete_line_to_width(t_data *data, char **line, int len)$/;"	f
conv_id_param	src/parse_params.c	/^int	conv_id_param(t_data *data, int identifier_len, char *str)$/;"	f
corner_crossing	src/move_to_corner.c	/^int	corner_crossing(t_data *data)$/;"	f
crc_table	minilibx_mac/mlx_png.c	/^unsigned long crc_table[256] = { 0, 0x77073096, 0xee0e612c, 0x990951ba, 0x76dc419, 0x706af48f, 0xe963a535, 0x9e6495a3, 0xedb8832, 0x79dcb8a4, 0xe0d5e91e, 0x97d2d988, 0x9b64c2b, 0x7eb17cbd, 0xe7b82d07, 0x90bf1d91, 0x1db71064, 0x6ab020f2, 0xf3b97148, 0x84be41de, 0x1adad47d, 0x6ddde4eb, 0xf4d4b551, 0x83d385c7, 0x136c9856, 0x646ba8c0, 0xfd62f97a, 0x8a65c9ec, 0x14015c4f, 0x63066cd9, 0xfa0f3d63, 0x8d080df5, 0x3b6e20c8, 0x4c69105e, 0xd56041e4, 0xa2677172, 0x3c03e4d1, 0x4b04d447, 0xd20d85fd, 0xa50ab56b, 0x35b5a8fa, 0x42b2986c, 0xdbbbc9d6, 0xacbcf940, 0x32d86ce3, 0x45df5c75, 0xdcd60dcf, 0xabd13d59, 0x26d930ac, 0x51de003a, 0xc8d75180, 0xbfd06116, 0x21b4f4b5, 0x56b3c423, 0xcfba9599, 0xb8bda50f, 0x2802b89e, 0x5f058808, 0xc60cd9b2, 0xb10be924, 0x2f6f7c87, 0x58684c11, 0xc1611dab, 0xb6662d3d, 0x76dc4190, 0x1db7106, 0x98d220bc, 0xefd5102a, 0x71b18589, 0x6b6b51f, 0x9fbfe4a5, 0xe8b8d433, 0x7807c9a2, 0xf00f934, 0x9609a88e, 0xe10e9818, 0x7f6a0dbb, 0x86d3d2d, 0x91646c97, 0xe6635c01, 0x6b6b51f4, 0x1c6c6162, 0x856530d8, 0xf262004e, 0x6c0695ed, 0x1b01a57b, 0x8208f4c1, 0xf50fc457, 0x65b0d9c6, 0x12b7e950, 0x8bbeb8ea, 0xfcb9887c, 0x62dd1ddf, 0x15da2d49, 0x8cd37cf3, 0xfbd44c65, 0x4db26158, 0x3ab551ce, 0xa3bc0074, 0xd4bb30e2, 0x4adfa541, 0x3dd895d7, 0xa4d1c46d, 0xd3d6f4fb, 0x4369e96a, 0x346ed9fc, 0xad678846, 0xda60b8d0, 0x44042d73, 0x33031de5, 0xaa0a4c5f, 0xdd0d7cc9, 0x5005713c, 0x270241aa, 0xbe0b1010, 0xc90c2086, 0x5768b525, 0x206f85b3, 0xb966d409, 0xce61e49f, 0x5edef90e, 0x29d9c998, 0xb0d09822, 0xc7d7a8b4, 0x59b33d17, 0x2eb40d81, 0xb7bd5c3b, 0xc0ba6cad, 0xedb88320, 0x9abfb3b6, 0x3b6e20c, 0x74b1d29a, 0xead54739, 0x9dd277af, 0x4db2615, 0x73dc1683, 0xe3630b12, 0x94643b84, 0xd6d6a3e, 0x7a6a5aa8, 0xe40ecf0b, 0x9309ff9d, 0xa00ae27, 0x7d079eb1, 0xf00f9344, 0x8708a3d2, 0x1e01f268, 0x6906c2fe, 0xf762575d, 0x806567cb, 0x196c3671, 0x6e6b06e7, 0xfed41b76, 0x89d32be0, 0x10da7a5a, 0x67dd4acc, 0xf9b9df6f, 0x8ebeeff9, 0x17b7be43, 0x60b08ed5, 0xd6d6a3e8, 0xa1d1937e, 0x38d8c2c4, 0x4fdff252, 0xd1bb67f1, 0xa6bc5767, 0x3fb506dd, 0x48b2364b, 0xd80d2bda, 0xaf0a1b4c, 0x36034af6, 0x41047a60, 0xdf60efc3, 0xa867df55, 0x316e8eef, 0x4669be79, 0xcb61b38c, 0xbc66831a, 0x256fd2a0, 0x5268e236, 0xcc0c7795, 0xbb0b4703, 0x220216b9, 0x5505262f, 0xc5ba3bbe, 0xb2bd0b28, 0x2bb45a92, 0x5cb36a04, 0xc2d7ffa7, 0xb5d0cf31, 0x2cd99e8b, 0x5bdeae1d, 0x9b64c2b0, 0xec63f226, 0x756aa39c, 0x26d930a, 0x9c0906a9, 0xeb0e363f, 0x72076785, 0x5005713, 0x95bf4a82, 0xe2b87a14, 0x7bb12bae, 0xcb61b38, 0x92d28e9b, 0xe5d5be0d, 0x7cdcefb7, 0xbdbdf21, 0x86d3d2d4, 0xf1d4e242, 0x68ddb3f8, 0x1fda836e, 0x81be16cd, 0xf6b9265b, 0x6fb077e1, 0x18b74777, 0x88085ae6, 0xff0f6a70, 0x66063bca, 0x11010b5c, 0x8f659eff, 0xf862ae69, 0x616bffd3, 0x166ccf45, 0xa00ae278, 0xd70dd2ee, 0x4e048354, 0x3903b3c2, 0xa7672661, 0xd06016f7, 0x4969474d, 0x3e6e77db, 0xaed16a4a, 0xd9d65adc, 0x40df0b66, 0x37d83bf0, 0xa9bcae53, 0xdebb9ec5, 0x47b2cf7f, 0x30b5ffe9, 0xbdbdf21c, 0xcabac28a, 0x53b39330, 0x24b4a3a6, 0xbad03605, 0xcdd70693, 0x54de5729, 0x23d967bf, 0xb3667a2e, 0xc4614ab8, 0x5d681b02, 0x2a6f2b94, 0xb40bbe37, 0xc30c8ea1, 0x5a05df1b, 0x2d02ef8d };$/;"	v
data	minilibx_linux/mlx_int.h	/^	char			*data;$/;"	m	struct:s_img
decrgb	minilibx_linux/mlx_int.h	/^	int			decrgb[6];$/;"	m	struct:s_xvar
degree_to_radian	src/vector_ft.c	/^double	degree_to_radian(double degree_angle)$/;"	f
delete_first_column	src/parse_format_map.c	/^void	delete_first_column(char **map)$/;"	f
delta_dist	include/cub3d.h	/^	t_vector	delta_dist;$/;"	m	struct:s_cam
depth	minilibx_linux/mlx_int.h	/^	int			depth;$/;"	m	struct:s_xvar
depth	minilibx_mac/mlx_png.c	/^  int		depth;$/;"	m	struct:png_info_s	file:
direction	include/cub3d.h	/^	t_vector	direction;$/;"	m	struct:s_player
display	minilibx_linux/mlx_int.h	/^	Display		*display;$/;"	m	struct:s_xvar
display_log	minilibx_mac/mlx_shaders.c	/^void display_log(GLuint object, void (*param_func)(), void (*getlog_func)())$/;"	f
distance_point_to_vector	src/vector_ft.c	/^double	distance_point_to_vector(t_point point, t_point v_p1, t_point v_p2)$/;"	f
do_flush	minilibx_linux/mlx_int.h	/^	int			do_flush;$/;"	m	struct:s_xvar
draw_cube	src/ft_window_init.c	/^void	draw_cube(t_window *window, int size, int pos_y, int pos_x, int color)$/;"	f
draw_line	src/ft_window_init.c	/^void	draw_line(t_data *data, t_point	*start, t_point	*end, int color)$/;"	f
draw_mini_map	src/ft_window_init.c	/^void	draw_mini_map(t_data *data)$/;"	f
draw_player	src/ft_window_init.c	/^void	draw_player(t_data *data)$/;"	f
e_cardinal	include/cub3d.h	/^enum e_cardinal { NORTH, SOUTH, EAST, WEST };$/;"	g
e_direction	include/cub3d.h	/^enum e_direction { N=1, S=2, W=10, E=20, NW=11, SW=12, SE=22, NE=21 };$/;"	g
e_identifiers	include/cub3d.h	/^enum e_identifiers { NO, SO, WE, EA, F, C };$/;"	g
e_player_direction	include/cub3d.h	/^enum e_player_direction{ FORWARD, BACKWARD, RIGHT, LEFT, NB_DIRECTION };$/;"	g
east_crossing	src/move_crossing_box.c	/^int	east_crossing(t_data *data)$/;"	f
end_loop	minilibx_linux/mlx_int.h	/^	int 		end_loop;$/;"	m	struct:s_xvar
error_msg	libft/error_msg.c	/^void	error_msg(char *msg)$/;"	f
exit_game	src/ft_key_event.c	/^int exit_game(t_data *data)$/;"	f
exit_msg	src/exit_ft.c	/^void	exit_msg(t_data *data, char *msg, int ret_exit)$/;"	f
expose_hook	minilibx_linux/mlx_int.h	/^	int					(*expose_hook)();$/;"	m	struct:s_win_list
expose_param	minilibx_linux/mlx_int.h	/^	void				*expose_param;$/;"	m	struct:s_win_list
f_is_box_crossed	src/move_player.c	/^static int	f_is_box_crossed(t_player *player)$/;"	f	file:
file_extention_available	src/parse_init.c	/^void	file_extention_available(t_data *data, char *fname)$/;"	f
fix_ang	src/ft_key_event.c	/^int fix_ang(int a)$/;"	f
floor_color	include/cub3d.h	/^	unsigned int	floor_color;$/;"	m	struct:s_image
font	minilibx_mac/mlx_int.h	/^  mlx_img_list_t	*font;$/;"	m	struct:mlx_ptr_s
font_atlas	minilibx_mac/font.c	/^} font_atlas = {$/;"	v	typeref:struct:__anon1	file:
font_fshader	minilibx_mac/mlx_int.h	/^  GLuint	font_fshader;$/;"	m	struct:glsl_info_s
font_program	minilibx_mac/mlx_int.h	/^  GLuint	font_program;$/;"	m	struct:glsl_info_s
font_vshader	minilibx_mac/mlx_int.h	/^  GLuint	font_vshader;$/;"	m	struct:glsl_info_s
format	minilibx_linux/mlx_int.h	/^	int				format;$/;"	m	struct:s_img
format_map	src/parse_format_map.c	/^void	format_map(t_data *data)$/;"	f
ft_append_tab	src/matrix.c	/^char	**ft_append_tab(char **matrix, char *str)$/;"	f
ft_atoi	libft/ft_atoi.c	/^int	ft_atoi(const char *str0)$/;"	f
ft_atoi_err	libft/ft_atoi_err.c	/^int	ft_atoi_err(char *str)$/;"	f
ft_bzero	libft/ft_bzero.c	/^void	*ft_bzero(void *s, size_t n)$/;"	f
ft_calloc	libft/ft_calloc.c	/^void	*ft_calloc(size_t count, size_t size)$/;"	f
ft_free_split	libft/ft_free_split.c	/^void	ft_free_split(char ***tab)$/;"	f
ft_get_next_wd	libft/ft_get_next_wd.c	/^char	*ft_get_next_wd(char *sentence, char sep)$/;"	f
ft_intlen	libft/ft_itoa.c	/^static int	ft_intlen(int n)$/;"	f	file:
ft_isalnum	libft/ft_isalnum.c	/^int	ft_isalnum(int c)$/;"	f
ft_isalpha	libft/ft_isalpha.c	/^int	ft_isalpha(int c)$/;"	f
ft_isascii	libft/ft_isascii.c	/^int	ft_isascii(int c)$/;"	f
ft_isdigit	libft/ft_isdigit.c	/^int	ft_isdigit(int c)$/;"	f
ft_isprint	libft/ft_isprint.c	/^int	ft_isprint(int c)$/;"	f
ft_isspace	libft/ft_atoi.c	/^static int	ft_isspace(const char c)$/;"	f	file:
ft_isspace	libft/ft_atoi_err.c	/^static int	ft_isspace(const char c)$/;"	f	file:
ft_itoa	libft/ft_itoa.c	/^char	*ft_itoa(int n)$/;"	f
ft_matrixlen	src/matrix.c	/^int	ft_matrixlen(char **matrix)$/;"	f
ft_memchr	libft/ft_memchr.c	/^void	*ft_memchr(const void *str0, int c, size_t n)$/;"	f
ft_memcmp	libft/ft_memcmp.c	/^int	ft_memcmp(const void *s1, const void *s2, size_t n)$/;"	f
ft_memcpy	libft/ft_memcpy.c	/^void	*ft_memcpy(void *dst, const void *src, unsigned int len)$/;"	f
ft_memmove	libft/ft_memmove.c	/^void	*ft_memmove(void *dst, const void *src, size_t len)$/;"	f
ft_memset	libft/ft_memset.c	/^void	*ft_memset(void *b, int c, size_t len)$/;"	f
ft_putchar_fd	libft/ft_putchar_fd.c	/^void	ft_putchar_fd(char c, int fd)$/;"	f
ft_putendl_fd	libft/ft_putendl_fd.c	/^void	ft_putendl_fd(char *s, int fd)$/;"	f
ft_putnbr_fd	libft/ft_putnbr_fd.c	/^void	ft_putnbr_fd(int n, int fd)$/;"	f
ft_putstr_fd	libft/ft_putstr_fd.c	/^void	ft_putstr_fd(char *s, int fd)$/;"	f
ft_realloc_cat	src/get_next_line.c	/^static char	*ft_realloc_cat(char *line, char c, int *len)$/;"	f	file:
ft_split	libft/ft_split.c	/^char	**ft_split(char const *s, char c)$/;"	f
ft_strchr	libft/ft_strchr.c	/^char	*ft_strchr(const char *str, int c)$/;"	f
ft_strdup	libft/ft_strdup.c	/^char	*ft_strdup(const char *s1)$/;"	f
ft_striteri	libft/ft_striteri.c	/^void	ft_striteri(char *s, void (*f)(unsigned int, char *))$/;"	f
ft_strjoin	libft/ft_strjoin.c	/^char	*ft_strjoin(char const *s1, char const *s2)$/;"	f
ft_strlcat	libft/ft_strlcat.c	/^size_t	ft_strlcat(char *dst, const char *src, size_t dstsize)$/;"	f
ft_strlcpy	libft/ft_strlcpy.c	/^size_t	ft_strlcpy(char *dst, const char *src, size_t dstsize)$/;"	f
ft_strlen	libft/ft_strlen.c	/^size_t	ft_strlen(const char *str)$/;"	f
ft_strlen_char	libft/ft_strlen_char.c	/^size_t	ft_strlen_char(char *str, char sep)$/;"	f
ft_strmapi	libft/ft_strmapi.c	/^char	*ft_strmapi(char const *s, char (*f)(unsigned int, char))$/;"	f
ft_strncmp	libft/ft_strncmp.c	/^int	ft_strncmp(const char *s1, const char *s2, size_t n)$/;"	f
ft_strnlen	libft/ft_strlcat.c	/^static unsigned int	ft_strnlen(char *s, size_t max)$/;"	f	file:
ft_strnstr	libft/ft_strnstr.c	/^char	*ft_strnstr(const char *str, const char *ndl, size_t len)$/;"	f
ft_strrchr	libft/ft_strrchr.c	/^char	*ft_strrchr(char *s, int c)$/;"	f
ft_strtrim	libft/ft_strtrim.c	/^char	*ft_strtrim(char const *s1, char const *set)$/;"	f
ft_substr	libft/ft_substr.c	/^char	*ft_substr(char const *s, unsigned int start, size_t len)$/;"	f
ft_tolower	libft/ft_tolower.c	/^int	ft_tolower(int c)$/;"	f
ft_toupper	libft/ft_toupper.c	/^int	ft_toupper(int c)$/;"	f
ft_wd_count	libft/ft_wd_count.c	/^int	ft_wd_count(char *str, char sep)$/;"	f
func_t	minilibx_mac/mlx_int.h	/^typedef int (*func_t)();$/;"	t
gc	minilibx_linux/mlx_int.h	/^	GC					gc;$/;"	m	struct:s_win_list
gc	minilibx_linux/mlx_int.h	/^	GC				gc;$/;"	m	struct:s_img
get_identifier	src/parse_params.c	/^int	get_identifier(t_data *data, char *str)$/;"	f
get_identifiers_ls	src/parse_params.c	/^char	**get_identifiers_ls(int identifier_len)$/;"	f
get_map_width	src/parse_format_map.c	/^int	get_map_width(char **map)$/;"	f
get_next_case	src/move_to_corner.c	/^char	get_next_case(char **map, t_point map_point, int direction)$/;"	f
get_next_line	src/get_next_line.c	/^char	*get_next_line(int fd)$/;"	f
get_smallest_index	src/move_to_corner.c	/^int	get_smallest_index(double wall_distance[4])$/;"	f
glsl_info_s	minilibx_mac/mlx_int.h	/^typedef struct	glsl_info_s$/;"	s
glsl_info_t	minilibx_mac/mlx_int.h	/^} glsl_info_t;$/;"	t	typeref:struct:glsl_info_s
height	include/cub3d.h	/^	int		height;$/;"	m	struct:s_window
height	minilibx_linux/mlx_int.h	/^	int				height;$/;"	m	struct:s_img
height	minilibx_mac/font.c	/^  unsigned int 	 height;$/;"	m	struct:__anon1	file:
height	minilibx_mac/mlx_int.h	/^  int			height;$/;"	m	struct:mlx_img_list_s
height	minilibx_mac/mlx_png.c	/^  unsigned int	height;$/;"	m	struct:png_info_s	file:
hit_point	include/cub3d.h	/^	t_vector	hit_point;$/;"	m	struct:s_ray
hook	minilibx_linux/mlx_int.h	/^	int		(*hook)();$/;"	m	struct:s_event_list
hooks	minilibx_linux/mlx_int.h	/^	t_event_list		hooks[MLX_MAX_EVENT];$/;"	m	struct:s_win_list
image	include/cub3d.h	/^	t_image		*image;$/;"	m	struct:s_data
image	minilibx_linux/mlx_int.h	/^	XImage			*image;$/;"	m	struct:s_img
image_fshader	minilibx_mac/mlx_int.h	/^  GLuint	image_fshader;$/;"	m	struct:glsl_info_s
image_program	minilibx_mac/mlx_int.h	/^  GLuint	image_program;$/;"	m	struct:glsl_info_s
image_vshader	minilibx_mac/mlx_int.h	/^  GLuint	image_vshader;$/;"	m	struct:glsl_info_s
img	minilibx_mac/mlx_int.h	/^  mlx_img_list_t	*img;$/;"	m	struct:mlx_img_ctx_s
img_list	minilibx_mac/mlx_int.h	/^  mlx_img_ctx_t		*img_list;$/;"	m	struct:mlx_win_list_s
img_list	minilibx_mac/mlx_int.h	/^  mlx_img_list_t	*img_list;$/;"	m	struct:mlx_ptr_s
import_param	src/parse_import.c	/^void	import_param(t_data *data, int identifier, char *line)$/;"	f
import_params	src/parse_import.c	/^int	import_params(t_data *data)$/;"	f
import_texture_path	src/parse_import.c	/^void	import_texture_path(t_data *data, int identifier, char *line)$/;"	f
init	include/cub3d.h	/^	void	*init;$/;"	m	struct:s_window
init_cam_vector	src/rayparsing.c	/^void	init_cam_vector(t_data *data)$/;"	f
init_f_c_color	src/parse_file_colors.c	/^unsigned int	init_f_c_color(t_data *data, char *line)$/;"	f
init_fd	src/parse_init.c	/^void	init_fd(t_data *data, int *fd, char *fname)$/;"	f
init_null	src/parse_init.c	/^void	init_null(t_data *data, int *map_parse)$/;"	f
init_player	src/parse_init.c	/^void	init_player(t_data *data, int x, int y, int *is_player)$/;"	f
interlace	minilibx_mac/mlx_png.c	/^  int		interlace;$/;"	m	struct:png_info_s	file:
is_NSEW	src/parse_check_map.c	/^int	is_NSEW(char c)$/;"	f
is_blank_char	src/str_ft.c	/^int	is_blank_char(char c)$/;"	f
is_blank_line	src/str_ft.c	/^int	is_blank_line(char *line)$/;"	f
is_block	src/move_to_corner.c	/^int	is_block(t_data *data, char c)$/;"	f
is_border	src/parse_check_map.c	/^int	is_border(t_data *data, int x, int y, int matrix_len)$/;"	f
is_first_column_empty	src/parse_format_map.c	/^int	is_first_column_empty(char **map)$/;"	f
is_map_line	src/str_ft.c	/^int	is_map_line(t_data *data, char *str)$/;"	f
is_mapcase	src/parse_check_map.c	/^int	is_mapcase(t_data *data, char c)$/;"	f
is_trimable	libft/ft_strtrim.c	/^static int	is_trimable(char c, char *trimset)$/;"	f	file:
key_event	src/ft_key_event.c	/^int	key_event(int key, t_data *data)$/;"	f
key_hook	minilibx_linux/mlx_int.h	/^	int					(*key_hook)();$/;"	m	struct:s_win_list
key_param	minilibx_linux/mlx_int.h	/^	void				*key_param;$/;"	m	struct:s_win_list
len	include/cub3d.h	/^	double		len;$/;"	m	struct:s_ray
line	include/cub3d.h	/^	char		*line;$/;"	m	struct:s_data
line_len	include/cub3d.h	/^	int				line_len;$/;"	m	struct:s_image
line_split	include/cub3d.h	/^	char		**line_split;$/;"	m	struct:s_data
loc_font_atlassize	minilibx_mac/mlx_int.h	/^  GLint		loc_font_atlassize;$/;"	m	struct:glsl_info_s
loc_font_color	minilibx_mac/mlx_int.h	/^  GLint		loc_font_color;$/;"	m	struct:glsl_info_s
loc_font_posinatlas	minilibx_mac/mlx_int.h	/^  GLint		loc_font_posinatlas;$/;"	m	struct:glsl_info_s
loc_font_posinwin	minilibx_mac/mlx_int.h	/^  GLint		loc_font_posinwin;$/;"	m	struct:glsl_info_s
loc_font_position	minilibx_mac/mlx_int.h	/^  GLint		loc_font_position;$/;"	m	struct:glsl_info_s
loc_font_texture	minilibx_mac/mlx_int.h	/^  GLint		loc_font_texture;$/;"	m	struct:glsl_info_s
loc_font_winhalfsize	minilibx_mac/mlx_int.h	/^  GLint		loc_font_winhalfsize;$/;"	m	struct:glsl_info_s
loc_image_pos	minilibx_mac/mlx_int.h	/^  GLint		loc_image_pos;$/;"	m	struct:glsl_info_s
loc_image_position	minilibx_mac/mlx_int.h	/^  GLint		loc_image_position;$/;"	m	struct:glsl_info_s
loc_image_size	minilibx_mac/mlx_int.h	/^  GLint		loc_image_size;$/;"	m	struct:glsl_info_s
loc_image_texture	minilibx_mac/mlx_int.h	/^  GLint		loc_image_texture;$/;"	m	struct:glsl_info_s
loc_image_winhalfsize	minilibx_mac/mlx_int.h	/^  GLint		loc_image_winhalfsize;$/;"	m	struct:glsl_info_s
loc_pixel_position	minilibx_mac/mlx_int.h	/^  GLint		loc_pixel_position;$/;"	m	struct:glsl_info_s
loc_pixel_texture	minilibx_mac/mlx_int.h	/^  GLint		loc_pixel_texture;$/;"	m	struct:glsl_info_s
loc_pixel_winhalfsize	minilibx_mac/mlx_int.h	/^  GLint		loc_pixel_winhalfsize;$/;"	m	struct:glsl_info_s
log_type	include/cub3d.h	/^enum log_type { DATA, PARAM, CAM, PLAYER, MAP };$/;"	g
loop_hook	minilibx_linux/mlx_int.h	/^	int			(*loop_hook)();$/;"	m	struct:s_xvar
loop_hook	minilibx_mac/mlx_int.h	/^  void			(*loop_hook)(void *);$/;"	m	struct:mlx_ptr_s
loop_hook_data	minilibx_mac/mlx_int.h	/^  void			*loop_hook_data;$/;"	m	struct:mlx_ptr_s
loop_param	minilibx_linux/mlx_int.h	/^	void		*loop_param;$/;"	m	struct:s_xvar
loop_timer	minilibx_mac/mlx_int.h	/^  void			*loop_timer;$/;"	m	struct:mlx_ptr_s
magic	minilibx_mac/mlx_png.c	/^unsigned char magic[PNG_MAGIC_SIZE] = {137, 80, 78, 71, 13, 10, 26, 10};$/;"	v
main	src/main.c	/^int	main(int argc, char *argv[])$/;"	f
main_loop_active	minilibx_mac/mlx_int.h	/^  int			main_loop_active;$/;"	m	struct:mlx_ptr_s
make_point	src/vector_ft.c	/^t_point	make_point(int x, int y)$/;"	f
make_str	libft/ft_itoa.c	/^static void	make_str(int *n, char *n_str, int i)$/;"	f	file:
make_tab	libft/ft_split.c	/^static char	**make_tab(char **returned, char const *s, char c, unsigned int nb_wd)$/;"	f	file:
malloc_data	src/main.c	/^ t_data	*malloc_data(void)$/;"	f
map	include/cub3d.h	/^	char		**map;$/;"	m	struct:s_data
map_cases	include/cub3d.h	/^	char		*map_cases;$/;"	m	struct:s_data
mask	minilibx_linux/mlx_int.h	/^	int		mask;$/;"	m	struct:s_event_list
mipng_crc	minilibx_mac/mlx_png.c	/^int	mipng_crc(unsigned char *ptr, int len)$/;"	f
mipng_data	minilibx_mac/mlx_png.c	/^int	mipng_data(mlx_img_list_t *img, unsigned char *dat, png_info_t *pi)$/;"	f
mipng_defilter	minilibx_mac/mlx_png.c	/^unsigned char (*(mipng_defilter[]))(unsigned char *buff, int pos, int a, int b, int c) =$/;"	v
mipng_defilter_average	minilibx_mac/mlx_png.c	/^unsigned char mipng_defilter_average(unsigned char *buff, int pos, int a, int b, int c)$/;"	f
mipng_defilter_none	minilibx_mac/mlx_png.c	/^unsigned char mipng_defilter_none(unsigned char *buff, int pos, int a, int b, int c)$/;"	f
mipng_defilter_paeth	minilibx_mac/mlx_png.c	/^unsigned char mipng_defilter_paeth(unsigned char *buff, int pos, int a, int b, int c)$/;"	f
mipng_defilter_sub	minilibx_mac/mlx_png.c	/^unsigned char mipng_defilter_sub(unsigned char *buff, int pos, int a, int b, int c)$/;"	f
mipng_defilter_up	minilibx_mac/mlx_png.c	/^unsigned char mipng_defilter_up(unsigned char *buff, int pos, int a, int b, int c)$/;"	f
mipng_err	minilibx_mac/mlx_png.c	/^char *(mipng_err[]) =$/;"	v
mipng_fill_img	minilibx_mac/mlx_png.c	/^int	mipng_fill_img(mlx_img_list_t *img, unsigned char *buf, png_info_t *pi)$/;"	f
mipng_is_type	minilibx_mac/mlx_png.c	/^int	mipng_is_type(unsigned char *ptr, char *type)$/;"	f
mipng_magic	minilibx_mac/mlx_png.c	/^int	mipng_magic(unsigned char *ptr, int size)$/;"	f
mipng_structure	minilibx_mac/mlx_png.c	/^int	mipng_structure(unsigned char *ptr, int size, unsigned char **hdr, unsigned char **dat)$/;"	f
mipng_verif_hdr	minilibx_mac/mlx_png.c	/^int	mipng_verif_hdr(unsigned char *hdr, png_info_t *pi)$/;"	f
mlx	include/cub3d.h	/^	void	*mlx;$/;"	m	struct:s_window
mlx_X_error	minilibx_linux/mlx_new_image.c	/^int	mlx_X_error;$/;"	v
mlx_clear_window	minilibx_linux/mlx_clear_window.c	/^int		mlx_clear_window(t_xvar *xvar,t_win_list *win)$/;"	f
mlx_col_name	minilibx_linux/mlx_rgb.c	/^struct s_col_name mlx_col_name[] =$/;"	v	typeref:struct:s_col_name
mlx_col_name	minilibx_mac/mlx_rgb.c	/^struct s_col_name mlx_col_name[] =$/;"	v	typeref:struct:s_col_name
mlx_destroy_display	minilibx_linux/mlx_destroy_display.c	/^int	mlx_destroy_display(t_xvar *xvar)$/;"	f
mlx_destroy_image	minilibx_linux/mlx_destroy_image.c	/^int	mlx_destroy_image(t_xvar *xvar, t_img *img)$/;"	f
mlx_destroy_window	minilibx_linux/mlx_destroy_window.c	/^int	mlx_destroy_window(t_xvar *xvar,t_win_list *win)$/;"	f
mlx_do_key_autorepeatoff	minilibx_linux/mlx_hook.c	/^int	mlx_do_key_autorepeatoff(t_xvar *xvar)$/;"	f
mlx_do_key_autorepeaton	minilibx_linux/mlx_hook.c	/^int	mlx_do_key_autorepeaton(t_xvar *xvar)$/;"	f
mlx_do_sync	minilibx_linux/mlx_hook.c	/^int	mlx_do_sync(t_xvar *xvar)$/;"	f
mlx_expose_hook	minilibx_linux/mlx_expose_hook.c	/^int		mlx_expose_hook(t_win_list *win,int (*funct)(),void *param)$/;"	f
mlx_ext_fullscreen	minilibx_linux/mlx_ext_randr.c	/^int			mlx_ext_fullscreen(t_xvar *xvar, t_win_list *win, int fullscreen)$/;"	f
mlx_flush_event	minilibx_linux/mlx_flush_event.c	/^int	mlx_flush_event(t_xvar *xvar)$/;"	f
mlx_get_color_value	minilibx_linux/mlx_get_color_value.c	/^int             mlx_get_color_value(t_xvar *xvar,int color)$/;"	f
mlx_get_data_addr	minilibx_linux/mlx_get_data_addr.c	/^char	*mlx_get_data_addr(t_img *img,int *bits_per_pixel,$/;"	f
mlx_get_screen_size	minilibx_linux/mlx_screen_size.c	/^int		mlx_get_screen_size(void *mlx_ptr, int *sizex, int *sizey)$/;"	f
mlx_hook	minilibx_linux/mlx_hook.c	/^int	mlx_hook(t_win_list *win, int x_event, int x_mask, $/;"	f
mlx_img_ctx_s	minilibx_mac/mlx_int.h	/^typedef struct	mlx_img_ctx_s$/;"	s
mlx_img_ctx_t	minilibx_mac/mlx_int.h	/^} mlx_img_ctx_t;$/;"	t	typeref:struct:mlx_img_ctx_s
mlx_img_list_s	minilibx_mac/mlx_int.h	/^typedef struct	mlx_img_list_s$/;"	s
mlx_img_list_t	minilibx_mac/mlx_int.h	/^} mlx_img_list_t;$/;"	t	typeref:struct:mlx_img_list_s
mlx_init	minilibx_linux/mlx_init.c	/^void	*mlx_init()$/;"	f
mlx_int_anti_resize_win	minilibx_linux/mlx_int_anti_resize_win.c	/^int	mlx_int_anti_resize_win(t_xvar *xvar,Window win,int w,int h)$/;"	f
mlx_int_deal_shm	minilibx_linux/mlx_init.c	/^int		mlx_int_deal_shm(t_xvar *xvar)$/;"	f
mlx_int_do_nothing	minilibx_linux/mlx_int_do_nothing.c	/^int	mlx_int_do_nothing(void *param)$/;"	f
mlx_int_egal_img	minilibx_linux/mlx_lib_xpm.c	/^int	mlx_int_egal_img(XImage *img1,XImage *img2)$/;"	f
mlx_int_file_get_rid_comment	minilibx_linux/mlx_xpm.c	/^int	mlx_int_file_get_rid_comment(char *ptr, int size)$/;"	f
mlx_int_file_get_rid_comment	minilibx_mac/mlx_xpm.c	/^void	mlx_int_file_get_rid_comment(char *ptr, int size)$/;"	f
mlx_int_get_col_name	minilibx_linux/mlx_xpm.c	/^int	mlx_int_get_col_name(char *str,int size)$/;"	f
mlx_int_get_col_name	minilibx_mac/mlx_xpm.c	/^int	mlx_int_get_col_name(char *str,int size)$/;"	f
mlx_int_get_good_color	minilibx_linux/mlx_get_color_value.c	/^int		mlx_int_get_good_color(t_xvar *xvar,int color)$/;"	f
mlx_int_get_line	minilibx_linux/mlx_xpm.c	/^char	*mlx_int_get_line(char *ptr,int *pos,int size)$/;"	f
mlx_int_get_line	minilibx_mac/mlx_xpm.c	/^char	*mlx_int_get_line(char *ptr,int *pos,int size)$/;"	f
mlx_int_get_text_rgb	minilibx_linux/mlx_xpm.c	/^int	mlx_int_get_text_rgb(char *name, char *end)$/;"	f
mlx_int_get_text_rgb	minilibx_mac/mlx_xpm.c	/^int	mlx_int_get_text_rgb(char *name, char *end)$/;"	f
mlx_int_get_visual	minilibx_linux/mlx_int_get_visual.c	/^int		mlx_int_get_visual(t_xvar *xvar)$/;"	f
mlx_int_new_image	minilibx_linux/mlx_new_image.c	/^void	*mlx_int_new_image(t_xvar *xvar,int width, int height,int format)$/;"	f
mlx_int_new_xshm_image	minilibx_linux/mlx_new_image.c	/^void	*mlx_int_new_xshm_image(t_xvar *xvar,int width,int height,int format)$/;"	f
mlx_int_param_ButtonPress	minilibx_linux/mlx_int_param_event.c	/^int	mlx_int_param_ButtonPress(t_xvar *xvar, XEvent *ev, t_win_list *win)$/;"	f
mlx_int_param_ButtonRelease	minilibx_linux/mlx_int_param_event.c	/^int	mlx_int_param_ButtonRelease(t_xvar *xvar, XEvent *ev, t_win_list *win)$/;"	f
mlx_int_param_Expose	minilibx_linux/mlx_int_param_event.c	/^int	mlx_int_param_Expose(t_xvar *xvar, XEvent *ev, t_win_list *win)$/;"	f
mlx_int_param_KeyPress	minilibx_linux/mlx_int_param_event.c	/^int	mlx_int_param_KeyPress(t_xvar *xvar, XEvent *ev, t_win_list *win)$/;"	f
mlx_int_param_KeyRelease	minilibx_linux/mlx_int_param_event.c	/^int	mlx_int_param_KeyRelease(t_xvar *xvar, XEvent *ev, t_win_list *win)$/;"	f
mlx_int_param_MotionNotify	minilibx_linux/mlx_int_param_event.c	/^int	mlx_int_param_MotionNotify(t_xvar *xvar, XEvent *ev, t_win_list *win)$/;"	f
mlx_int_param_event	minilibx_linux/mlx_int_param_event.c	/^int	(*(mlx_int_param_event[]))() =$/;"	v
mlx_int_param_generic	minilibx_linux/mlx_int_param_event.c	/^int	mlx_int_param_generic(t_xvar *xvar, XEvent *ev, t_win_list *win)$/;"	f
mlx_int_param_undef	minilibx_linux/mlx_int_param_event.c	/^int	mlx_int_param_undef()$/;"	f
mlx_int_parse_png	minilibx_mac/mlx_png.c	/^mlx_img_list_t	*mlx_int_parse_png(mlx_ptr_t *xvar, unsigned char *fptr, int size)$/;"	f
mlx_int_parse_xpm	minilibx_linux/mlx_xpm.c	/^void	*mlx_int_parse_xpm(t_xvar *xvar,void *info,int info_size,char *(*f)())$/;"	f
mlx_int_parse_xpm	minilibx_mac/mlx_xpm.c	/^void	*mlx_int_parse_xpm(mlx_ptr_t *xvar,void *info,int info_size,char *(*f)())$/;"	f
mlx_int_rgb_conversion	minilibx_linux/mlx_init.c	/^int		mlx_int_rgb_conversion(t_xvar *xvar)$/;"	f
mlx_int_set_win_event_mask	minilibx_linux/mlx_int_set_win_event_mask.c	/^int	mlx_int_set_win_event_mask(t_xvar *xvar)$/;"	f
mlx_int_static_line	minilibx_linux/mlx_xpm.c	/^char	*mlx_int_static_line(char **xpm_data,int *pos,int size)$/;"	f
mlx_int_static_line	minilibx_mac/mlx_xpm.c	/^char	*mlx_int_static_line(char **xpm_data,int *pos,int size)$/;"	f
mlx_int_str_str	minilibx_linux/mlx_int_str_to_wordtab.c	/^int	mlx_int_str_str(char *str,char *find,int len)$/;"	f
mlx_int_str_str	minilibx_mac/mlx_int_str_to_wordtab.c	/^int	mlx_int_str_str(char *str,char *find,int len)$/;"	f
mlx_int_str_str_cote	minilibx_linux/mlx_int_str_to_wordtab.c	/^int	mlx_int_str_str_cote(char *str,char *find,int len)$/;"	f
mlx_int_str_str_cote	minilibx_mac/mlx_int_str_to_wordtab.c	/^int	mlx_int_str_str_cote(char *str,char *find,int len)$/;"	f
mlx_int_str_to_wordtab	minilibx_linux/mlx_int_str_to_wordtab.c	/^char	**mlx_int_str_to_wordtab(char *str)$/;"	f
mlx_int_str_to_wordtab	minilibx_mac/mlx_int_str_to_wordtab.c	/^char	**mlx_int_str_to_wordtab(char *str)$/;"	f
mlx_int_wait_first_expose	minilibx_linux/mlx_int_wait_first_expose.c	/^int	mlx_int_wait_first_expose(t_xvar *xvar,Window win)$/;"	f
mlx_int_xpm_f_image	minilibx_linux/mlx_lib_xpm.c	/^void		*mlx_int_xpm_f_image(t_xvar *xvar,int *width,int *height,$/;"	f
mlx_int_xpm_set_pointel	minilibx_linux/mlx_xpm.c	/^int	mlx_int_xpm_set_pointel(t_img *img, char *data, int opp, int col, int x)$/;"	f
mlx_int_xpm_set_pointel	minilibx_mac/mlx_xpm.c	/^void	mlx_int_xpm_set_pointel(mlx_img_list_t *img, char *data, int opp, int col, int x)$/;"	f
mlx_key_hook	minilibx_linux/mlx_key_hook.c	/^int		mlx_key_hook(t_win_list *win,int (*funct)(),void *param)$/;"	f
mlx_loop	minilibx_linux/mlx_loop.c	/^int			mlx_loop(t_xvar *xvar)$/;"	f
mlx_loop_end	minilibx_linux/mlx_loop.c	/^int			mlx_loop_end(t_xvar *xvar)$/;"	f
mlx_loop_hook	minilibx_linux/mlx_loop_hook.c	/^int	mlx_loop_hook(t_xvar *xvar,int (*funct)(),void *param)$/;"	f
mlx_mouse_get_pos	minilibx_linux/mlx_mouse.c	/^int		mlx_mouse_get_pos(t_xvar *xvar, t_win_list *win, \\$/;"	f
mlx_mouse_hide	minilibx_linux/mlx_mouse.c	/^int		mlx_mouse_hide(t_xvar *xvar, t_win_list *win)$/;"	f
mlx_mouse_hook	minilibx_linux/mlx_mouse_hook.c	/^int		mlx_mouse_hook(t_win_list *win,int (*funct)(),void *param)$/;"	f
mlx_mouse_move	minilibx_linux/mlx_mouse.c	/^int		mlx_mouse_move(t_xvar *xvar, t_win_list *win, int x, int y)$/;"	f
mlx_mouse_show	minilibx_linux/mlx_mouse.c	/^int		mlx_mouse_show(t_xvar *xvar, t_win_list *win)$/;"	f
mlx_new_image	minilibx_linux/mlx_new_image.c	/^void	*mlx_new_image(t_xvar *xvar,int width, int height)$/;"	f
mlx_new_image2	minilibx_linux/mlx_new_image.c	/^void	*mlx_new_image2(t_xvar *xvar,int width, int height)$/;"	f
mlx_new_window	minilibx_linux/mlx_new_window.c	/^void	*mlx_new_window(t_xvar *xvar,int size_x,int size_y,char *title)$/;"	f
mlx_pixel_put	minilibx_linux/mlx_pixel_put.c	/^int		mlx_pixel_put(t_xvar *xvar,t_win_list *win,$/;"	f
mlx_png_file_to_image	minilibx_mac/mlx_png.c	/^void	*mlx_png_file_to_image(mlx_ptr_t *xvar, char *file, int *width, int *height)$/;"	f
mlx_ptr_s	minilibx_mac/mlx_int.h	/^typedef struct		mlx_ptr_s$/;"	s
mlx_ptr_t	minilibx_mac/mlx_int.h	/^} mlx_ptr_t;$/;"	t	typeref:struct:mlx_ptr_s
mlx_put_image_to_window	minilibx_linux/mlx_put_image_to_window.c	/^int	mlx_put_image_to_window(t_xvar *xvar,t_win_list *win,t_img *img,$/;"	f
mlx_set_font	minilibx_linux/mlx_set_font.c	/^void	mlx_set_font(t_xvar *xvar, t_win_list *win, char *name)$/;"	f
mlx_shaders	minilibx_mac/mlx_shaders.c	/^int mlx_shaders(glsl_info_t *glsl)$/;"	f
mlx_shaders_font	minilibx_mac/mlx_shaders.c	/^int mlx_shaders_font(glsl_info_t *glsl)$/;"	f
mlx_shaders_image	minilibx_mac/mlx_shaders.c	/^int mlx_shaders_image(glsl_info_t *glsl)$/;"	f
mlx_shaders_pixel	minilibx_mac/mlx_shaders.c	/^int mlx_shaders_pixel(glsl_info_t *glsl)$/;"	f
mlx_string_put	minilibx_linux/mlx_string_put.c	/^int		mlx_string_put(t_xvar *xvar,t_win_list *win,$/;"	f
mlx_win_list_s	minilibx_mac/mlx_int.h	/^typedef struct	mlx_win_list_s$/;"	s
mlx_win_list_t	minilibx_mac/mlx_int.h	/^} mlx_win_list_t;$/;"	t	typeref:struct:mlx_win_list_s
mlx_xpm_file_to_image	minilibx_linux/mlx_lib_xpm.c	/^void	*mlx_xpm_file_to_image(t_xvar *xvar,char *filename,$/;"	f
mlx_xpm_file_to_image	minilibx_linux/mlx_xpm.c	/^void	*mlx_xpm_file_to_image(t_xvar *xvar,char *file,int *width,int *height)$/;"	f
mlx_xpm_file_to_image	minilibx_mac/mlx_xpm.c	/^void	*mlx_xpm_file_to_image(mlx_ptr_t *xvar,char *file,int *width,int *height)$/;"	f
mlx_xpm_to_image	minilibx_linux/mlx_lib_xpm.c	/^void	*mlx_xpm_to_image(t_xvar *xvar,char **data,int *width,int *height)$/;"	f
mlx_xpm_to_image	minilibx_linux/mlx_xpm.c	/^void	*mlx_xpm_to_image(t_xvar *xvar,char **xpm_data,int *width,int *height)$/;"	f
mlx_xpm_to_image	minilibx_mac/mlx_xpm.c	/^void	*mlx_xpm_to_image(mlx_ptr_t *xvar,char **xpm_data,int *width,int *height)$/;"	f
mouse_hook	minilibx_linux/mlx_int.h	/^	int					(*mouse_hook)();$/;"	m	struct:s_win_list
mouse_param	minilibx_linux/mlx_int.h	/^	void				*mouse_param;$/;"	m	struct:s_win_list
move_player	src/move_player.c	/^int	move_player(t_data *data, int move)$/;"	f
my_loc	libft/ft_itoa.c	/^static char	*my_loc(int len)$/;"	f	file:
name	minilibx_linux/mlx_int.h	/^	char	*name;$/;"	m	struct:s_col_name
name	minilibx_linux/mlx_int.h	/^	int		name;$/;"	m	struct:s_xpm_col
name	minilibx_mac/mlx_xpm.c	/^  char  *name;$/;"	m	struct:s_col_name	file:
name	minilibx_mac/mlx_xpm.c	/^  int           name;$/;"	m	struct:s_xpm_col	file:
nb_flush	minilibx_mac/mlx_int.h	/^  int			nb_flush;$/;"	m	struct:mlx_win_list_s
next	minilibx_linux/mlx_int.h	/^	struct s_win_list	*next;$/;"	m	struct:s_win_list	typeref:struct:s_win_list::s_win_list
next	minilibx_mac/mlx_int.h	/^  struct mlx_img_ctx_s	*next;$/;"	m	struct:mlx_img_ctx_s	typeref:struct:mlx_img_ctx_s::mlx_img_ctx_s
next	minilibx_mac/mlx_int.h	/^  struct mlx_img_list_s	*next;$/;"	m	struct:mlx_img_list_s	typeref:struct:mlx_img_list_s::mlx_img_list_s
next	minilibx_mac/mlx_int.h	/^  struct mlx_win_list_s	*next;$/;"	m	struct:mlx_win_list_s	typeref:struct:mlx_win_list_s::mlx_win_list_s
north_crossing	src/move_crossing_box.c	/^int	north_crossing(t_data *data)$/;"	f
origin_plane	include/cub3d.h	/^	t_vector	origin_plane;$/;"	m	struct:s_cam
param	minilibx_linux/mlx_int.h	/^	void	*param;$/;"	m	struct:s_event_list
parse_file	src/parse_import.c	/^void	parse_file(char *fname, t_data *data)$/;"	f
parsing_loop	src/parse_import.c	/^int	parsing_loop(t_data *data, int *map_parse)$/;"	f
pix	minilibx_linux/mlx_int.h	/^	Pixmap			pix;$/;"	m	struct:s_img
pix_pos_in_box	src/pos_update.c	/^static t_point	pix_pos_in_box(t_point pos_box)$/;"	f	file:
pix_pos_to_map_case	src/map_ft.c	/^char	pix_pos_to_map_case(t_point absolute_pos, char **map)$/;"	f
pix_pos_to_map_pos	src/map_ft.c	/^t_point	pix_pos_to_map_pos(t_point absolute_pos)$/;"	f
pixel_data	minilibx_mac/font.c	/^  unsigned char	 pixel_data[1140 * 20 * 4 + 1];$/;"	m	struct:__anon1	file:
pixel_fshader	minilibx_mac/mlx_int.h	/^  GLuint	pixel_fshader;$/;"	m	struct:glsl_info_s
pixel_program	minilibx_mac/mlx_int.h	/^  GLuint	pixel_program;$/;"	m	struct:glsl_info_s
pixel_vshader	minilibx_mac/mlx_int.h	/^  GLuint	pixel_vshader;$/;"	m	struct:glsl_info_s
pixmgt	minilibx_mac/mlx_int.h	/^  int			pixmgt;$/;"	m	struct:mlx_win_list_s
plane_dir	include/cub3d.h	/^	t_vector	plane_dir;$/;"	m	struct:s_cam
player	include/cub3d.h	/^	t_player	*player;$/;"	m	struct:s_data
player_init	src/ft_player_init.c	/^int	player_init(char **map, t_player *player)$/;"	f
png_info_s	minilibx_mac/mlx_png.c	/^typedef struct png_info_s$/;"	s	file:
png_info_t	minilibx_mac/mlx_png.c	/^} png_info_t;$/;"	t	typeref:struct:png_info_s	file:
pos_box	include/cub3d.h	/^	t_point		pos_box;$/;"	m	struct:s_player
pos_in_pix	include/cub3d.h	/^	t_point		pos_in_pix;$/;"	m	struct:s_player
pos_in_step	include/cub3d.h	/^	t_point		pos_in_step;$/;"	m	struct:s_player
pos_map	include/cub3d.h	/^	t_point		pos_map;$/;"	m	struct:s_player
print_cam	src/debug_ft.c	/^void	print_cam(t_data *data, int fd)$/;"	f
print_data	src/debug_ft.c	/^void	print_data(t_data *data, int fd)$/;"	f
print_map	src/debug_ft.c	/^void	print_map(t_data *data, int fd)$/;"	f
print_params	src/debug_ft.c	/^void	print_params(t_data *data, int fd)$/;"	f
print_player	src/debug_ft.c	/^void	print_player(t_data *data, int fd)$/;"	f
private_cmap	minilibx_linux/mlx_int.h	/^	int			private_cmap;$/;"	m	struct:s_xvar
pshm_format	minilibx_linux/mlx_int.h	/^	int			pshm_format;$/;"	m	struct:s_xvar
ray_cast	src/ft_window_init.c	/^int	ray_cast(t_data *data)$/;"	f
ray_direction	include/cub3d.h	/^	t_vector	ray_direction;$/;"	m	struct:s_cam
rectangle_map	src/parse_format_map.c	/^void	rectangle_map(t_data *data, char **map)$/;"	f
redir_debug_file_logs	src/debug_ft.c	/^void	redir_debug_file_logs(t_data *data, char *fname, int log_type)$/;"	f
redir_debug_file_msg	src/debug_ft.c	/^void	redir_debug_file_msg(char *fname, char *msg)$/;"	f
refresh_ret_if_is_param	src/parse_params.c	/^static int	refresh_ret_if_is_param(char **identifiers, \\$/;"	f	file:
render_map_2d	src/ft_window_init.c	/^int	render_map_2d(t_data *data)$/;"	f
rgb_conv	src/parse_file_colors.c	/^unsigned int	rgb_conv(int R, int G, int B)$/;"	f
root	minilibx_linux/mlx_int.h	/^	Window		root;$/;"	m	struct:s_xvar
rotate_player	src/rotate_player.c	/^void	rotate_player(t_player *player, int move)$/;"	f
rotate_vector	src/vector_ft.c	/^void	rotate_vector(t_vector *vector, double radian_angle)$/;"	f
s_cam	include/cub3d.h	/^typedef struct	s_cam$/;"	s
s_col_name	minilibx_linux/mlx_int.h	/^struct	s_col_name$/;"	s
s_col_name	minilibx_mac/mlx_xpm.c	/^struct  s_col_name$/;"	s	file:
s_data	include/cub3d.h	/^typedef struct s_data$/;"	s
s_event_list	minilibx_linux/mlx_int.h	/^typedef struct	s_event_list$/;"	s
s_image	include/cub3d.h	/^typedef struct s_image$/;"	s
s_img	minilibx_linux/mlx_int.h	/^typedef struct	s_img$/;"	s
s_player	include/cub3d.h	/^typedef struct s_player$/;"	s
s_point	include/cub3d.h	/^typedef struct s_point$/;"	s
s_ray	include/cub3d.h	/^typedef struct	s_ray$/;"	s
s_vector	include/cub3d.h	/^typedef struct s_vector$/;"	s
s_win_list	minilibx_linux/mlx_int.h	/^typedef struct	s_win_list$/;"	s
s_window	include/cub3d.h	/^typedef struct s_window$/;"	s
s_xpm_col	minilibx_linux/mlx_int.h	/^typedef	struct	s_xpm_col$/;"	s
s_xpm_col	minilibx_mac/mlx_xpm.c	/^typedef struct  s_xpm_col$/;"	s	file:
s_xvar	minilibx_linux/mlx_int.h	/^typedef struct	s_xvar$/;"	s
saved_mode	minilibx_linux/mlx_ext_randr.c	/^RRMode	saved_mode = 0;$/;"	v
screen	minilibx_linux/mlx_int.h	/^	int			screen;$/;"	m	struct:s_xvar
set_arRay	src/rayparsing.c	/^void	set_arRay(t_data *data)$/;"	f
set_delta_distance	src/rayparsing.c	/^void	set_delta_distance(t_data *data)$/;"	f
set_plane_dir	src/rayparsing.c	/^void	set_plane_dir(t_data *data, double plan_size)$/;"	f
set_plane_origin	src/rayparsing.c	/^void	set_plane_origin(t_data *data)$/;"	f
set_side_distance	src/rayparsing.c	/^void	set_side_distance(t_data *data)$/;"	f
shift_line_left	src/parse_format_map.c	/^void	shift_line_left(char *line)$/;"	f
shm	minilibx_linux/mlx_int.h	/^	XShmSegmentInfo	shm;$/;"	m	struct:s_img
shm_att_pb	minilibx_linux/mlx_new_image.c	/^int	shm_att_pb(Display *d,XErrorEvent *ev)$/;"	f
side_dist	include/cub3d.h	/^	t_vector	side_dist;$/;"	m	struct:s_cam
size_line	minilibx_linux/mlx_int.h	/^	int				size_line;$/;"	m	struct:s_img
slide_closest_box	src/move_to_corner.c	/^void	slide_closest_box(t_player *p, int closest_box)$/;"	f
south_crossing	src/move_crossing_box.c	/^int	south_crossing(t_data *data)$/;"	f
strlcpy_is_not_posix	minilibx_linux/mlx_xpm.c	/^unsigned int	strlcpy_is_not_posix(char *dest, char *src, unsigned int size)$/;"	f
t_cam	include/cub3d.h	/^}	t_cam;$/;"	t	typeref:struct:s_cam
t_data	include/cub3d.h	/^}	t_data;$/;"	t	typeref:struct:s_data
t_event_list	minilibx_linux/mlx_int.h	/^}				t_event_list;$/;"	t	typeref:struct:s_event_list
t_image	include/cub3d.h	/^}	t_image;$/;"	t	typeref:struct:s_image
t_img	minilibx_linux/mlx_int.h	/^}				t_img;$/;"	t	typeref:struct:s_img
t_player	include/cub3d.h	/^}	t_player;$/;"	t	typeref:struct:s_player
t_point	include/cub3d.h	/^}	t_point;$/;"	t	typeref:struct:s_point
t_ray	include/cub3d.h	/^}	t_ray;$/;"	t	typeref:struct:s_ray
t_vector	include/cub3d.h	/^}	t_vector;$/;"	t	typeref:struct:s_vector
t_win_list	minilibx_linux/mlx_int.h	/^}				t_win_list;$/;"	t	typeref:struct:s_win_list
t_window	include/cub3d.h	/^}	t_window;$/;"	t	typeref:struct:s_window
t_xpm_col	minilibx_linux/mlx_int.h	/^}				t_xpm_col;$/;"	t	typeref:struct:s_xpm_col
t_xpm_col	minilibx_mac/mlx_xpm.c	/^} t_xpm_col;$/;"	t	typeref:struct:s_xpm_col	file:
t_xvar	minilibx_linux/mlx_int.h	/^}				t_xvar;$/;"	t	typeref:struct:s_xvar
test_function	src/main.c	/^void	test_function(t_data *data)$/;"	f
texture	minilibx_mac/mlx_int.h	/^  GLuint		texture;$/;"	m	struct:mlx_img_ctx_s
texture_path	include/cub3d.h	/^	char			*texture_path[NB_TEXTURES];$/;"	m	struct:s_image
translate_pt	src/vector_ft.c	/^void	translate_pt(t_vector vector, t_point *pt)$/;"	f
translate_vector_as_pt	src/vector_ft.c	/^void	translate_vector_as_pt(t_vector vector, t_vector *pt)$/;"	f
type	minilibx_linux/mlx_int.h	/^	int				type;$/;"	m	struct:s_img
update_pos_if_wall	src/move_player.c	/^int	update_pos_if_wall(t_data *data, int crossover_direction)$/;"	f
update_pos_in_pix	src/pos_update.c	/^t_point	update_pos_in_pix(t_player *player)$/;"	f
update_pos_in_step	src/pos_update.c	/^t_point	update_pos_in_step(t_player *player)$/;"	f
use_xshm	minilibx_linux/mlx_int.h	/^	int			use_xshm;$/;"	m	struct:s_xvar
vbuffer	minilibx_mac/mlx_int.h	/^  GLuint		vbuffer;$/;"	m	struct:mlx_img_ctx_s
vec_scale	src/vector_ft.c	/^t_vector	vec_scale(t_vector vector, double scale)$/;"	f
vertexes	minilibx_mac/mlx_int.h	/^  GLfloat		vertexes[8];$/;"	m	struct:mlx_img_list_s
visual	minilibx_linux/mlx_int.h	/^	Visual		*visual;$/;"	m	struct:s_xvar
west_crossing	src/move_crossing_box.c	/^int	west_crossing(t_data *data)$/;"	f
width	include/cub3d.h	/^	int		width;$/;"	m	struct:s_window
width	minilibx_linux/mlx_int.h	/^	int				width;$/;"	m	struct:s_img
width	minilibx_mac/font.c	/^  unsigned int 	 width;$/;"	m	struct:__anon1	file:
width	minilibx_mac/mlx_int.h	/^  int			width;$/;"	m	struct:mlx_img_list_s
width	minilibx_mac/mlx_png.c	/^  unsigned int	width;$/;"	m	struct:png_info_s	file:
win_count	minilibx_linux/mlx_loop.c	/^static int	win_count(t_xvar *xvar)$/;"	f	file:
win_list	minilibx_linux/mlx_int.h	/^	t_win_list	*win_list;$/;"	m	struct:s_xvar
win_list	minilibx_mac/mlx_int.h	/^  mlx_win_list_t	*win_list;$/;"	m	struct:mlx_ptr_s
window	include/cub3d.h	/^	t_window	*window;$/;"	m	struct:s_data
window	minilibx_linux/mlx_int.h	/^	Window				window;$/;"	m	struct:s_win_list
window_init	src/ft_window_init.c	/^int	window_init(t_window *window)$/;"	f
winid	minilibx_mac/mlx_int.h	/^  void			*winid;$/;"	m	struct:mlx_win_list_s
wm_delete_window	minilibx_linux/mlx_int.h	/^	Atom		wm_delete_window;$/;"	m	struct:s_xvar
wm_protocols	minilibx_linux/mlx_int.h	/^	Atom		wm_protocols;$/;"	m	struct:s_xvar
wrong_color	src/parse_file_colors.c	/^void	wrong_color(t_data *data, char *color_strimed)$/;"	f
x	include/cub3d.h	/^	double	x;$/;"	m	struct:s_vector
x	include/cub3d.h	/^	int	x;$/;"	m	struct:s_point
y	include/cub3d.h	/^	double	y;$/;"	m	struct:s_vector
y	include/cub3d.h	/^	int	y;$/;"	m	struct:s_point
