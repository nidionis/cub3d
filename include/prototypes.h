#include "cub3d.h"
void			error_msg(char *msg);
char	**default_map(char	*argv[]);
char	**ft_append_tab(char **matrix, char *str);
char	*get_next_line(int fd);
int func(void);
int	conv_id_param(t_data *data, int identifier_len, char *str);
void	file_extention_available(t_data *data, char *fname);
int	ft_matrixlen(char **matrix);
int	get_identifier(t_data *data, char *str);
int	import_params(t_data *data);
void	parse_file(char *fname, t_data	*s);
int	parsing_loop(t_data *data, int *map_parse);
t_player	*default_player(void);
t_point	get_vector(t_point *from, t_point *to);
t_vector	vec_diff(t_vector v1, t_point v2);
t_vector	vec_scale(t_vector vec, double scale);
void init_null(t_data *data, int *map_parse);
void	add_vec(t_point	*pt, t_point vec);
void	clean_exit(t_data *data, int exit_code);
void	exit_msg(t_data *data, char *msg, int ret_exit);
void	import_param(t_data *data, int identifier, char *line);
void	ray_parse(t_data *data);
void	wrong_color(t_data *data, char *color_strimed);
int	is_blank_line(char *line);
int	is_blank_char(char c);
int	is_map_line(t_data *data, char *str);
int	check_map(t_data *data);
unsigned int	init_f_c_color(t_data *s, char *line);
void	print_player(t_data *data, int fd);
void	print_params(t_data *data, int fd);
void	print_map(t_data *data, int fd);
void	print_s(t_data *data, int fd);
void	redir_debug_file_logs(t_data *data, char *fname, int log_type);
void	init_player(t_data *data, int x, int y, int *is_player);
void	init_fd(t_data *data, int *fd, char *fname);


int	check_wall(t_data *data, int crossover_direction);
int	check_update_box_pos(t_data *data);
int	move_player(t_data *data, int direction);
t_point	translate_pt_inplace(t_vector vector, t_point *pt);
double	distance_point_to_vector(t_point point, t_point v_p1, t_point v_p2);
t_point	make_point(int x, int y);
int	north_crossing(t_data *data);
int	south_crossing(t_data *data);
int	east_crossing(t_data *data);
int	west_crossing(t_data *data);
void	rotate_vector(t_vector *vector, double radian_angle);
double	degree_to_radian(double degree_angle);
int	corner_crossing(t_data *data);
int	is_block(t_data *data, char c);
void	redir_debug_file_msg(char *fname, char *msg);
void	rotate_player(t_player *player, int move);
int	is_available_mapcase(t_data *data, int x, int y, int *is_player);
int	is_block(t_data *data, char c);
int	is_mapcase(t_data *data, char c);
int	is_NSEW(char c);
void	init_cam_vector(t_data *data);
t_point	get_player_absolute_position(t_player *player);
void	clean_useless_empty_splace(char	**map);
void	rectangle_map(t_data *data, char **map);
void	format_map(t_data *data);
unsigned int	rgb_conv(int R, int G, int B);
void	translate_vector_as_pt(t_vector vector, t_vector *pt);
t_point	update_pos_in_pix(t_player *player);
t_point	update_pos_in_step(t_player *player);
void	init_cam_vector(t_data *data);
void	set_camera(t_data *data);
double	vec_len(t_vector vector);
t_vector	convert_pt_to_vec(t_point p);
void	set_delta_distance(t_data *data);
void	set_side_distance(t_data *data);
char	pix_pos_to_map_case(t_data *data, t_point absolute_pos);
void	draw_wall_line(t_data *data, int i);
int	ray_cast(t_data *data);
void	set_arRay(t_data *data);
int	still_in_map(t_data *data, t_point pt);
double	distance_line_to_point(t_vector line[2], t_point p);
void	set_delta_distance(t_data *data);
void	set_side_distance(t_data *data);
t_point	translate_pt(t_vector vector, t_point pt);
double	distance_points(t_point p1, t_point p2);
t_obstacle	*add_sprites(t_data *data, t_rayponse *rayturned, t_obstacle **obstacles_ls);
t_obstacle	*add_obstacle(t_data *data, t_rayponse r, char m_case, t_obstacle **ls);
void	convert_pos_and_dir_to_line(t_point pos, t_vector vec, t_vector line[2]);
t_obstacle	*add_obstacle(t_data *data, t_rayponse r, char m_case, t_obstacle **ls);
t_obstacle	*sort_obstacles(t_obstacle **ls);
void	set_texture_size(t_texture *texture, char *path);

t_obstacle	*add_sprites_to_obstacles_ls(t_data *data, t_rayponse *rayponse, t_obstacle **obstacles_ls);
int	get_side_hit(t_data *data, int index_closest);
int	len_overflow(int len);
void	set_beam(t_data *data, t_obstacle **obstacles_ls);
double get_dist_from_plan(t_data *data, t_rayponse *rayponse);
t_point	units_pos_to_minimap_pos(t_data *data, t_point absolute_position);

	/* list */
int	    ft_lstsize(t_list *lst);
t_list	*ft_lstlast(t_list *lst);
t_list	*ft_lstnew(void *content);
void	ft_lstadd_back(t_list **lst, t_list *new);
void	ft_lstadd_front(t_list **lst, t_list *new);
void	ft_lstclear(t_list **lst, void (*del)(void *));
void	ft_lstdelone(t_list *lst, void (*del)(void *));
void	ft_lstiter(t_list *lst, void (*f)(void *));

//duarte functions
int	window_init(t_data *data);
int	render_map_2d(t_data *data);
int	player_init(char **map, t_player *player);
int exit_game(t_data *data);
int	graphics_render(t_data *data);
int	cub3d_render(t_data *data);

//___________________draw functions_______________
void	draw_line(t_data *data, t_point	*start, t_point	*end, int color);
void	draw_mini_map(t_data *data);
void	draw_player(t_data *data);
void	draw_vision_field(t_data *data, t_point minimap_position);
void    my_mlx_pixel_put(t_img_data *img, int x, int y, int color);
void	init_key_status(t_data *data);
int     key_press(int key, t_data *data);
int     key_realese(int key, t_data *data);
void	load_textures(t_data *data);
void	draw_cube(t_data *data, int size, int pos_y, int pos_x, int color);
